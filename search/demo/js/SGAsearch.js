// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.SGAsearch = {};

  (function($, SGAsearch, _, Backbone) {
    var _ref, _ref1, _ref2, _ref3;

    SGAsearch.SearchResult = (function(_super) {
      __extends(SearchResult, _super);

      function SearchResult() {
        _ref = SearchResult.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      SearchResult.prototype.defaults = {
        "hls": [],
        "id": "[Page]",
        "shelfmark": "[Shelfmark]",
        "title": "[Title]",
        "nbook": "[Notebook]",
        "author": "[Author]",
        "editor": "[Editor]",
        "date": "[Date]"
      };

      return SearchResult;

    })(Backbone.Model);
    SGAsearch.SearchResultList = (function(_super) {
      __extends(SearchResultList, _super);

      function SearchResultList() {
        _ref1 = SearchResultList.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      SearchResultList.prototype.model = SGAsearch.SearchResult;

      return SearchResultList;

    })(Backbone.Collection);
    SGAsearch.SearchResultListView = (function(_super) {
      __extends(SearchResultListView, _super);

      function SearchResultListView() {
        this.addOne = __bind(this.addOne, this);        _ref2 = SearchResultListView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      SearchResultListView.prototype.render = function() {
        this.collection.each(this.addOne, this);
        return this;
      };

      SearchResultListView.prototype.addOne = function(model) {
        var view;

        view = new SGAsearch.SearchResultView({
          model: model
        });
        return $(SGAsearch.destination).append(view.render().$el);
      };

      SearchResultListView.prototype.clear = function() {
        return this.collection.each(function(m) {
          return m.trigger('destroy');
        });
      };

      return SearchResultListView;

    })(Backbone.View);
    SGAsearch.SearchResultView = (function(_super) {
      __extends(SearchResultView, _super);

      function SearchResultView() {
        _ref3 = SearchResultView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      SearchResultView.prototype.template = _.template($('#result-template').html());

      SearchResultView.prototype.initialize = function() {
        this.listenTo(this.model, 'change', this.render);
        return this.listenTo(this.model, 'destroy', this.remove);
      };

      SearchResultView.prototype.render = function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      SearchResultView.prototype.remove = function() {
        this.$el.remove();
        return this;
      };

      return SearchResultView;

    })(Backbone.View);
    return SGAsearch.search = function(service, query, options, destination, page) {
      var fields, updateResults, url,
        _this = this;

      if (page == null) {
        page = 0;
      }
      SGAsearch.destination = destination;
      if (this.srlv != null) {
        this.srlv.clear();
      }
      this.srl = new SGAsearch.SearchResultList();
      this.srlv = new SGAsearch.SearchResultListView({
        collection: this.srl
      });
      fields = "text";
      url = "" + service + "?q=" + query + "&f=" + fields;
      updateResults = function(res) {
        var r, sr, _i, _len, _ref4;

        _ref4 = res.results;
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          r = _ref4[_i];
          sr = new SGAsearch.SearchResult();
          _this.srlv.collection.add(sr);
          r.num = (res.results.indexOf(r) + 1) + page * 20;
          r.id = r.id.substr(r.id.length - 4);
          r.shelfmark = r.shelfmark.substr(r.shelfmark.length - 3);
          sr.set(r);
        }
        return _this.srlv.render();
      };
      return $.ajax({
        url: url,
        type: 'GET',
        processData: false,
        success: updateResults
      });
    };
  })(jQuery, window.SGAsearch, _, Backbone);

}).call(this);
