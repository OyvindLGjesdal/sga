// Generated by CoffeeScript 1.6.3
/*
# SGA Shared Canvas v0.133060
#
# **SGA Shared Canvas** is a shared canvas reader written in CoffeeScript.
#
# Date: Thu Oct 31 15:51:40 2013 -0400
#
# (c) Copyright University of Maryland 2012-2013.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/


(function() {
  var __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($, MITHgrid) {
    MITHgrid.globalNamespace("SGA");
    return SGA.namespace("Reader", function(SGAReader) {
      SGAReader.namespace("Data", function(Data) {
        Data.namespace("StyleStore", function(StyleStore) {
          return StyleStore.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, __slice.call(args).concat([function(that) {
              var docs, options, regex;
              options = that.options;
              docs = {};
              regex = new RegExp("(?:\\.(\\S+)\\s*\\{\\s*([^}]*)\\s*\\})", "mg");
              that.addStyles = function(id, css) {
                var results, _results;
                if (docs[id] != null) {
                  return;
                }
                docs[id] = {};
                results = regex.exec(css);
                _results = [];
                while ((results != null ? results.index : void 0) != null) {
                  docs[id][results[1]] = results[2];
                  _results.push(results = regex.exec(css));
                }
                return _results;
              };
              return that.getStylesForClass = function(id, klass) {
                var _ref;
                if (((_ref = docs[id]) != null ? _ref[klass] : void 0) != null) {
                  return docs[id][klass];
                } else {
                  return "";
                }
              };
            }]));
          };
        });
        Data.namespace("TextStore", function(TextStore) {
          return TextStore.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, __slice.call(args).concat([function(that) {
              var fileContents, loadingFiles, options, pendingFiles;
              options = that.options;
              fileContents = {};
              loadingFiles = {};
              pendingFiles = {};
              that.addFile = function(files) {
                var file, _i, _len, _results;
                if (!$.isArray(files)) {
                  files = [files];
                }
                _results = [];
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  file = files[_i];
                  _results.push((function(file) {
                    if ((file != null) && (fileContents[file] == null) && (loadingFiles[file] == null)) {
                      loadingFiles[file] = [];
                      return $.ajax({
                        url: file,
                        type: 'GET',
                        processData: false,
                        success: function(data) {
                          var c, f, _j, _len1, _ref;
                          c = data.documentElement.textContent;
                          fileContents[file] = c;
                          _ref = loadingFiles[file];
                          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                            f = _ref[_j];
                            f(c);
                          }
                          return delete loadingFiles[file];
                        }
                      });
                    }
                  })(file));
                }
                return _results;
              };
              return that.withFile = function(file, cb) {
                if (fileContents[file] != null) {
                  return cb(fileContents[file]);
                } else if (loadingFiles[file] != null) {
                  return loadingFiles[file].push(cb);
                } else {
                  that.addFile(file);
                  return loadingFiles[file].push(cb);
                }
              };
            }]));
          };
        });
        return Data.namespace("Manifest", function(Manifest) {
          var NS, types;
          NS = {
            "http://dms.stanford.edu/ns/": "sc",
            "http://www.shared-canvas.org/ns/": "sc",
            "http://www.w3.org/2000/01/rdf-schema#": "rdfs",
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#": "rdf",
            "http://www.w3.org/2003/12/exif/ns#": "exif",
            "http://purl.org/dc/elements/1.1/": "dc",
            "http://www.w3.org/ns/openannotation/core/": "oa",
            "http://www.openannotation.org/ns/": "oa",
            "http://www.w3.org/ns/openannotation/extension/": "oax",
            "http://www.openarchives.org/ore/terms/": "ore",
            "http://www.shelleygodwinarchive.org/ns/1#": "sga",
            "http://www.shelleygodwinarchive.org/ns1#": "sga",
            "http://www.w3.org/2011/content#": "cnt",
            "http://purl.org/dc/dcmitype/": "dctypes"
          };
          types = {
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#type": "item",
            "http://www.w3.org/ns/openannotation/core/hasMotivation": "item"
          };
          return Manifest.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Data.Manifest"].concat(__slice.call(args), [function(that) {
              var data, flushSearchResults, getSearchResultCanvases, importFromURL, importer, itemsForCanvas, itemsWithType, loadedUrls, options;
              options = that.options;
              data = MITHgrid.Data.Store.initInstance();
              that.size = function() {
                return data.size();
              };
              importer = MITHgrid.Data.Importer.RDF_JSON.initInstance(data, NS, types);
              loadedUrls = [];
              importFromURL = function(url, cb) {
                if (__indexOf.call(loadedUrls, url) >= 0) {
                  cb();
                  return;
                }
                loadedUrls.push(url);
                that.addItemsToProcess(1);
                return $.ajax({
                  url: url,
                  type: 'GET',
                  contentType: 'application/rdf+json',
                  processData: false,
                  dataType: 'json',
                  success: function(data) {
                    that.addItemsProcessed(1);
                    return that.importJSON(data, cb);
                  },
                  error: function(e) {
                    that.addItemsProcessed(1);
                    throw new Error("Could not load the manifest");
                  }
                });
              };
              that.importJSON = function(json, cb) {
                var syncer;
                syncer = MITHgrid.initSynchronizer(cb);
                syncer.increment();
                importer["import"](json, function(ids) {
                  var idset, urls;
                  idset = MITHgrid.Data.Set.initInstance(ids);
                  urls = data.getObjectsUnion(idset, 'oreisDescribedBy');
                  urls.visit(function(url) {
                    syncer.increment();
                    return importFromURL(url, syncer.decrement);
                  });
                  return syncer.decrement();
                });
                return syncer.done();
              };
              itemsWithType = function(type) {
                if (!$.isArray(type)) {
                  type = [type];
                }
                types = MITHgrid.Data.Set.initInstance(type);
                return data.getSubjectsUnion(types, "type").items();
              };
              itemsForCanvas = function(canvas) {
                var annos, canvasSet, contentAnnotations, imageAnnotations, specificResources, specificResourcesAnnos, tei, teiURL;
                if (!$.isArray(canvas)) {
                  canvas = [canvas];
                }
                canvasSet = MITHgrid.Data.Set.initInstance(canvas);
                specificResources = data.getSubjectsUnion(canvasSet, "oahasSource");
                imageAnnotations = data.getSubjectsUnion(canvasSet, "oahasTarget");
                contentAnnotations = data.getSubjectsUnion(specificResources, "oahasTarget");
                tei = data.getObjectsUnion(contentAnnotations, 'oahasBody');
                teiURL = data.getObjectsUnion(tei, 'oahasSource');
                specificResourcesAnnos = data.getSubjectsUnion(teiURL, 'oahasSource');
                annos = data.getSubjectsUnion(specificResourcesAnnos, 'oahasTarget').items();
                return annos.concat(imageAnnotations.items(), contentAnnotations.items());
              };
              flushSearchResults = function() {
                var searchResults;
                types = MITHgrid.Data.Set.initInstance(['sgaSearchAnnotation']);
                searchResults = data.getSubjectsUnion(types, "type").items();
                return data.removeItems(searchResults);
              };
              getSearchResultCanvases = function() {
                var annos, canvasKeys, searchResults, sources, specificResources, step, teiURL;
                types = MITHgrid.Data.Set.initInstance(['sgaSearchAnnotation']);
                searchResults = data.getSubjectsUnion(types, "type");
                specificResources = data.getObjectsUnion(searchResults, "oahasTarget");
                teiURL = data.getObjectsUnion(specificResources, 'oahasSource');
                sources = data.getSubjectsUnion(teiURL, 'oahasSource');
                annos = data.getSubjectsUnion(sources, 'oahasBody');
                step = data.getObjectsUnion(annos, 'oahasTarget');
                canvasKeys = data.getObjectsUnion(step, 'oahasSource');
                return $.unique(canvasKeys.items());
              };
              that.getCanvases = function() {
                return itemsWithType('scCanvas');
              };
              that.getZones = function() {
                return itemsWithType('scZone');
              };
              that.getSequences = function() {
                return itemsWithType('scSequence');
              };
              that.getAnnotations = function() {
                return itemsWithType('oaAnnotation');
              };
              that.getRanges = function() {
                return itemsWithType('scRange');
              };
              that.getLayers = function() {
                return itemsWithType('scLayer');
              };
              that.getManifests = function() {
                return itemsWithType('scManifest');
              };
              that.getAnnotationsForCanvas = itemsForCanvas;
              that.flushSearchResults = flushSearchResults;
              that.getSearchResultCanvases = getSearchResultCanvases;
              that.getItem = data.getItem;
              that.contains = data.contains;
              return that.importFromURL = function(url, cb) {
                return importFromURL(url, function() {
                  if (cb != null) {
                    return cb();
                  }
                });
              };
            }]));
          };
        });
      });
      SGAReader.namespace("Presentation", function(Presentation) {
        Presentation.namespace("TextContent", function(TextContent) {
          return TextContent.initInstance = function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Presentation.TextContent"].concat(__slice.call(args), [function(that, container) {
              var additionLens, annoLens, currentLine, lenses, lineAlignments, lineIndents, lines, options, renderingTimer, scaleSettings;
              options = that.options;
              that.setHeight(0);
              that.events.onWidthChange.addListener(function(w) {
                return $(container).attr('width', w / 10);
              });
              if (options.width != null) {
                that.setWidth(options.width);
              }
              if (options.x != null) {
                that.setX(options.x);
              }
              if (options.y != null) {
                that.setY(options.y);
              }
              if (options.height != null) {
                that.setHeight(options.height);
              }
              if (options.scale != null) {
                that.setScale(options.scale);
              }
              if (options.inHTML) {
                that.events.onScaleChange.addListener(function(s) {
                  var r, _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = scaleSettings.length; _i < _len; _i++) {
                    r = scaleSettings[_i];
                    _results.push(r.setScale(s));
                  }
                  return _results;
                });
              }
              lines = {};
              lineAlignments = {};
              lineIndents = {};
              scaleSettings = [];
              currentLine = 0;
              that.startDisplayUpdate = function() {
                lines = {};
                return currentLine = 0;
              };
              that.finishDisplayUpdate = function() {
                var afterLayout, afterLayoutPos, currentLineEl, currentPos, i, lineNo, lineNoFraq, r, runAfterLayout, _fn, _i, _j, _len, _len1, _ref, _ref1;
                $(container).empty();
                afterLayout = [];
                _ref = ((function() {
                  var _results;
                  _results = [];
                  for (i in lines) {
                    _results.push(i);
                  }
                  return _results;
                })()).sort(function(a, b) {
                  return a - b;
                });
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  lineNo = _ref[_i];
                  currentLineEl = $("<div></div>");
                  if (lineAlignments[lineNo] != null) {
                    currentLineEl.css({
                      'text-align': lineAlignments[lineNo]
                    });
                  }
                  if (lineIndents[lineNo] != null) {
                    currentLineEl.css;
                    currentLineEl.css({
                      'padding-left': (lineIndents[lineNo] * 1) + "em"
                    });
                  }
                  lineNoFraq = lineNo - Math.floor(lineNo);
                  if (lineNoFraq < 0) {
                    lineNoFraq += 1;
                  }
                  if (lineNoFraq > 0.5) {
                    currentLineEl.addClass('above-line');
                  } else if (lineNoFraq > 0) {
                    currentLineEl.addClass('below-line');
                  }
                  $(container).append(currentLineEl);
                  currentPos = 0;
                  afterLayoutPos = 0;
                  _ref1 = lines[lineNo];
                  _fn = function(r) {
                    if (r.setScale != null) {
                      scaleSettings.push(r);
                    }
                    if (r.$el != null) {
                      if (r.positioned) {
                        currentPos = r.charLead;
                        if (afterLayout[afterLayoutPos] != null) {
                          afterLayout[afterLayoutPos].push(r.afterLayout);
                        } else {
                          afterLayout[afterLayoutPos] = [r.afterLayout];
                        }
                      }
                      $(currentLineEl).append(r.$el);
                      r.$el.attr('data-pos', currentPos);
                      r.$el.attr('data-line', lineNo);
                      return currentPos += r.charWidth || 0;
                    }
                  };
                  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                    r = _ref1[_j];
                    _fn(r);
                  }
                }
                runAfterLayout = function(i) {
                  var fn, _k, _len2, _ref2;
                  if (i < afterLayout.length) {
                    _ref2 = afterLayout[i];
                    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                      fn = _ref2[_k];
                      fn();
                    }
                    return setTimeout((function() {
                      return runAfterLayout(i + 1);
                    }), 0);
                  }
                };
                return runAfterLayout(0);
              };
              renderingTimer = null;
              that.eventModelChange = function() {
                if (renderingTimer != null) {
                  clearTimeout(renderingTimer);
                }
                return renderingTimer = setTimeout(function() {
                  that.selfRender();
                  return renderingTimer = null;
                }, 0);
              };
              annoLens = function(container, view, model, id) {
                var content, el, item, rendering;
                rendering = {};
                el = $("<span style='display: inline-block'></span>");
                rendering.$el = el;
                item = model.getItem(id);
                el.text(item.text[0]);
                el.addClass(item.type.join(" "));
                if ((item.css != null) && !/^\s*$/.test(item.css)) {
                  el.attr("style", item.css[0]);
                }
                content = item.text[0].replace(/\s+/g, " ");
                if (content === " ") {
                  rendering.charWidth = 0;
                } else {
                  rendering.charWidth = content.length;
                }
                if (rendering.charWidth === 0) {
                  return null;
                }
                if (lines[currentLine] == null) {
                  lines[currentLine] = [];
                }
                lines[currentLine].push(rendering);
                rendering.line = currentLine;
                rendering.positioned = false;
                rendering.setScale = function(s) {};
                rendering.afterLayout = function() {
                  return rendering.width = rendering.$el.width() / that.getScale();
                };
                rendering.remove = function() {
                  var r;
                  el.remove();
                  return lines[rendering.line] = (function() {
                    var _i, _len, _ref, _results;
                    _ref = lines[rendering.line];
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      r = _ref[_i];
                      if (r !== rendering) {
                        _results.push(r);
                      }
                    }
                    return _results;
                  })();
                };
                rendering.update = function(item) {
                  return el.text(item.text[0]);
                };
                return rendering;
              };
              additionLens = function(container, view, model, id) {
                var content, el, item, lastRendering, ourLineNo, rendering, _ref, _ref1, _ref2;
                rendering = {};
                el = $("<span style='display: inline-block'></span>");
                rendering.$el = el;
                item = model.getItem(id);
                el.text(item.text[0]);
                el.addClass(item.type.join(" "));
                if ((item.css != null) && /vertical-align: sub;/.test(item.css[0])) {
                  ourLineNo = currentLine + 0.3;
                } else if ((item.css != null) && /vertical-align: super;/.test(item.css[0])) {
                  ourLineNo = currentLine - 0.3;
                } else {
                  ourLineNo = currentLine;
                }
                if (lines[ourLineNo] == null) {
                  lines[ourLineNo] = [];
                }
                lines[ourLineNo].push(rendering);
                lastRendering = (_ref = lines[currentLine]) != null ? _ref[((_ref1 = lines[currentLine]) != null ? _ref1.length : void 0) - 1] : void 0;
                rendering.positioned = currentLine !== ourLineNo && ((_ref2 = lines[currentLine]) != null ? _ref2.length : void 0) > 0;
                content = item.text[0].replace(/\s+/g, " ");
                if (content === " ") {
                  rendering.charWidth = 0;
                } else {
                  rendering.charWidth = content.length;
                }
                rendering.line = ourLineNo;
                rendering.setScale = function() {};
                rendering.afterLayout = function() {
                  var accOffset, availableSpace, middle, myMiddle, myOffset, neededSpace, ourLeft, ourWidth, prevOffset, prevSibling, prevSiblings, spacing, usedSpace;
                  ourWidth = that.getWidth() / 10;
                  ourLeft = rendering.$el.parent().offset().left;
                  rendering.width = rendering.$el.width() / that.getScale();
                  rendering.$el.css({
                    width: Math.ceil(rendering.width * that.getScale()) + "px"
                  });
                  if (lastRendering != null) {
                    myOffset = rendering.$el.offset();
                    if (lastRendering.$el.hasClass('DeletionAnnotation')) {
                      middle = lastRendering.$el.offset().left + (lastRendering.$el.outerWidth(false) / 2);
                    } else {
                      middle = lastRendering.$el.offset().left + (lastRendering.$el.outerWidth(false));
                    }
                    myMiddle = myOffset.left + rendering.$el.outerWidth(false) / 2;
                    neededSpace = middle - myMiddle;
                    prevSibling = rendering.$el.prev();
                    accOffset = 0;
                    spacing = 0;
                    if ((prevSibling != null) && prevSibling.size() > 0) {
                      prevOffset = prevSibling.offset();
                      accOffset = prevSibling.offset().left + prevSibling.outerWidth(false) - ourLeft;
                      spacing = (prevOffset.left + prevSibling.outerWidth(false)) - myOffset.left;
                      spacing = parseInt(prevSibling.css('left'), 10) || 0;
                      if (spacing > neededSpace) {
                        neededSpace = spacing;
                      }
                    }
                    if (neededSpace >= 0) {
                      if (neededSpace + (myOffset.left - ourLeft) + accOffset + rendering.$el.outerWidth(false) > ourWidth) {
                        neededSpace = ourWidth - (myOffset.left - ourLeft) - accOffset - rendering.$el.outerWidth(false);
                      }
                    }
                    if (neededSpace < 0) {
                      if ((prevSibling == null) || prevSibling.size() <= 0) {
                        neededSpace = 0;
                      } else {
                        neededSpace = -neededSpace;
                        prevSiblings = rendering.$el.prevAll();
                        availableSpace = 0;
                        prevSiblings.each(function(i, x) {
                          return availableSpace += parseInt($(x).css('left'), 10) || 0;
                        });
                        if (prevSibling.size() > 0) {
                          availableSpace -= prevSibling.offset().left - ourLeft + prevSibling.outerWidth(false);
                        }
                        if (availableSpace > neededSpace) {
                          usedSpace = 0;
                          prevSiblings.each(function(i, s) {
                            var oldLeft, useWidth;
                            oldLeft = parseInt($(s).css('left'), 10) || 0;
                            if (availableSpace > 0) {
                              useWidth = Math.floor(oldLeft * (neededSpace - usedSpace) / availableSpace);
                              $(s).css('left', (oldLeft - useWidth - usedSpace) + "px");
                              usedSpace += useWidth;
                              return availableSpace -= oldLeft;
                            }
                          });
                          neededSpace = -neededSpace;
                        } else {
                          prevSiblings.each(function(i, s) {
                            return $(s).css('left', "0px");
                          });
                          neededSpace = 0;
                        }
                      }
                    }
                    if (neededSpace > 0) {
                      if (prevSibling.size() > 0) {
                        if (neededSpace < parseInt(prevSibling.css('left'), 10)) {
                          neededSpace = parseInt(prevSibling.css('left'), 10);
                        }
                      }
                      rendering.$el.css({
                        'position': 'relative',
                        'left': neededSpace + "px"
                      });
                      rendering.left = neededSpace / that.getScale();
                      return rendering.setScale = function(s) {
                        return rendering.$el.css({
                          'left': Math.floor(rendering.left * s) + "px",
                          'width': Math.ceil(rendering.width * s) + "px"
                        });
                      };
                    }
                  }
                };
                rendering.remove = function() {
                  var r;
                  el.remove();
                  return lines[rendering.line] = (function() {
                    var _i, _len, _ref3, _results;
                    _ref3 = lines[rendering.line];
                    _results = [];
                    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
                      r = _ref3[_i];
                      if (r !== rendering) {
                        _results.push(r);
                      }
                    }
                    return _results;
                  })();
                };
                rendering.update = function(item) {
                  return el.text(item.text[0]);
                };
                return rendering;
              };
              lenses = {};
              that.addLens = function(key, lens) {
                return lenses[key] = lens;
              };
              that.getLens = function(id) {
                var item, t, types, _i, _j, _len, _len1, _ref;
                item = that.dataView.getItem(id);
                types = [];
                _ref = item.type;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  t = _ref[_i];
                  if ($.isArray(t)) {
                    types = types.concat(t);
                  } else {
                    types.push(t);
                  }
                }
                if (__indexOf.call(types, 'AdditionAnnotation') >= 0) {
                  return {
                    render: lenses['AdditionAnnotation']
                  };
                }
                for (_j = 0, _len1 = types.length; _j < _len1; _j++) {
                  t = types[_j];
                  if (t !== 'LineAnnotation' && (lenses[t] != null)) {
                    return {
                      render: lenses[t]
                    };
                  }
                }
                return {
                  render: lenses['LineAnnotation']
                };
              };
              that.hasLens = function(k) {
                return lenses[k] != null;
              };
              that.addLens('AdditionAnnotation', additionLens);
              that.addLens('DeletionAnnotation', annoLens);
              that.addLens('SearchAnnotation', annoLens);
              that.addLens('LineAnnotation', annoLens);
              that.addLens('Text', function() {});
              return that.addLens('LineBreak', function(container, view, model, id) {
                var item, _ref, _ref1;
                item = model.getItem(id);
                if (((_ref = item.align) != null ? _ref.length : void 0) > 0) {
                  lineAlignments[currentLine] = item.align[0];
                }
                if (((_ref1 = item.indent) != null ? _ref1.length : void 0) > 0) {
                  lineIndents[currentLine] = Math.floor(item.indent[0]) || 0;
                }
                currentLine += 1;
                return null;
              });
            }]));
          };
        });
        Presentation.namespace("Zone", function(Zone) {
          return Zone.initInstance = function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Presentation.Zone"].concat(__slice.call(args), [function(that, container) {
              var annoExpr, app, options, svgRoot;
              options = that.options;
              svgRoot = options.svgRoot;
              app = that.options.application();
              that.setHeight(options.height);
              that.setWidth(options.width);
              that.setX(options.x);
              that.setY(options.y);
              that.setScale(options.scale);
              $(container).css({
                'overflow': 'hidden'
              });
              if (typeof that.onDestroy === "function") {
                that.onDestroy(that.events.onScaleChange.addListener(function(s) {
                  return that.visitRenderings(function(id, r) {
                    if (typeof r.setScale === "function") {
                      r.setScale(s);
                    }
                    return true;
                  });
                }));
              }
              annoExpr = that.dataView.prepare(['!target']);
              that.addLens('ContentAnnotation', function(innerContainer, view, model, id) {
                var height, item, overflowDiv, rendering, rootEl, textContainer, width, x, y, _ref, _ref1, _ref2, _ref3;
                if (__indexOf.call(options.types || [], 'Text') < 0) {
                  return;
                }
                rendering = {};
                item = model.getItem(id);
                textContainer = $("<div></div>");
                x = ((_ref = item.x) != null ? _ref[0] : void 0) != null ? item.x[0] : 0;
                y = ((_ref1 = item.y) != null ? _ref1[0] : void 0) != null ? item.y[0] : 0;
                width = ((_ref2 = item.width) != null ? _ref2[0] : void 0) != null ? item.width[0] : options.width - x;
                height = ((_ref3 = item.height) != null ? _ref3[0] : void 0) != null ? item.height[0] : options.height - y;
                $(textContainer).css({
                  "position": "absolute",
                  "left": Math.floor(16 + x * that.getScale()) + "px",
                  "top": Math.floor(y * that.getScale()) + "px",
                  "width": Math.floor(width * that.getScale()) + "px",
                  "height": Math.floor(height * that.getScale()) + "px"
                });
                container.append(textContainer);
                overflowDiv = $("<div></div>");
                container.append(overflowDiv);
                rootEl = $("<div></div>");
                $(rootEl).addClass("text-content");
                $(overflowDiv).css({
                  'overflow': 'auto',
                  'height': Math.floor(height * that.getScale()) + "px",
                  'width': Math.floor(width * that.getScale()) + "px"
                });
                overflowDiv.append(rootEl);
                rootEl.text(item.text[0]);
                rendering.getHeight = function() {
                  return $(textContainer).height() * 10;
                };
                rendering.getY = function() {
                  return $(textContainer).position().top * 10;
                };
                rendering.update = function(item) {
                  return rootEl.text(item.text[0]);
                };
                rendering.remove = function() {
                  return rootEl.remove();
                };
                rendering.setScale = function(s) {
                  $(textContainer).css({
                    "left": Math.floor(16 + x * s) + "px",
                    "top": Math.floor(y * s) + "px",
                    "width": Math.floor(width * s) + "px",
                    "height": Math.floor(height * s) + "px"
                  });
                  return $(overflowDiv).css({
                    'height': Math.floor(height * that.getScale()) + "px",
                    'width': Math.floor(width * that.getScale()) + "px"
                  });
                };
                return rendering;
              });
              that.addLens('TextContentZone', function(innerContainer, view, model, id) {
                var height, item, marquee, marqueeHeight, marqueeLeft, marqueeTop, marqueeWidth, rendering, rootEl, strokeW, text, textContainer, textDataView, updateMarque, visiblePerc, width, x, y, zoom, _ref, _ref1, _ref2, _ref3, _ref4;
                if (__indexOf.call(options.types || [], 'Text') < 0) {
                  return;
                }
                rendering = {};
                app = options.application();
                zoom = app.imageControls.getZoom();
                item = model.getItem(id);
                textContainer = $("<div></div>");
                textContainer.css({
                  overflow: 'auto',
                  position: 'absolute'
                });
                container.append(textContainer);
                rootEl = $("<div></div>");
                $(rootEl).addClass("text-content");
                $(rootEl).attr("id", id);
                $(rootEl).css({
                  "white-space": "nowrap"
                });
                textContainer.append(rootEl);
                updateMarque = function(z) {};
                app = options.application();
                $('.marquee').remove();
                strokeW = 1;
                marquee = $("<div class='marquee'></div>");
                $(container).append(marquee);
                marquee.css({
                  "border-color": 'navy',
                  "background-color": "yellow",
                  "border-width": strokeW,
                  "opacity": "0.1",
                  "border-opacity": "0.9",
                  "width": options.width * options.scale,
                  "height": options.height * options.scale,
                  "position": "absolute",
                  "z-index": 0,
                  "top": 0,
                  "left": 16
                });
                visiblePerc = 100;
                marqueeLeft = 0;
                marqueeTop = 0;
                marqueeWidth = Math.floor((that.getWidth() * visiblePerc * that.getScale()) / 100, 10);
                marqueeHeight = Math.floor((that.getHeight() * visiblePerc * that.getScale()) / 100, 10);
                updateMarque = function(z) {
                  var width;
                  if (app.imageControls.getMaxZoom() > 0) {
                    width = Math.floor(that.getWidth() * that.getScale() / Math.pow(2, z));
                    visiblePerc = Math.min(100, width * 100 / $(container).width());
                    marqueeWidth = Math.floor((that.getWidth() * visiblePerc * that.getScale()) / 100, 10);
                    marqueeHeight = Math.floor((that.getHeight() * visiblePerc * that.getScale()) / 100, 10);
                    marquee.css({
                      "width": marqueeLeft < 0 ? marqueeWidth + marqueeLeft : marqueeWidth + marqueeLeft > $(container).width() ? $(container).width() - marqueeLeft : marqueeWidth,
                      "height": marqueeTop < 0 ? marqueeHeight + marqueeTop : marqueeHeight + marqueeTop > $(container).height() ? $(container).height() - marqueeTop : marqueeHeight
                    });
                    if (app.imageControls.getZoom() > app.imageControls.getMaxZoom() - 1) {
                      return $(marquee).css("opacity", "0");
                    } else {
                      return $(marquee).css("opacity", "0.1");
                    }
                  }
                };
                if (typeof that.onDestroy === "function") {
                  that.onDestroy(app.imageControls.events.onZoomChange.addListener(updateMarque));
                }
                if (typeof that.onDestroy === "function") {
                  that.onDestroy(app.imageControls.events.onImgPositionChange.addListener(function(p) {
                    marqueeLeft = Math.floor(-p.topLeft.x * that.getScale());
                    marqueeTop = Math.floor(-p.topLeft.y * that.getScale());
                    return marquee.css({
                      "left": 16 + Math.max(0, marqueeLeft),
                      "top": Math.max(0, marqueeTop),
                      "width": marqueeLeft < 0 ? marqueeWidth + marqueeLeft : marqueeWidth + marqueeLeft > $(container).width() ? $(container).width() - marqueeLeft : marqueeWidth,
                      "height": marqueeTop < 0 ? marqueeHeight + marqueeTop : marqueeHeight + marqueeTop > $(container).height() ? $(container).height() - marqueeTop : marqueeHeight
                    });
                  }));
                }
                $('.marquee').hide();
                if (typeof that.onDestroy === "function") {
                  that.onDestroy((_ref = app.imageControls) != null ? _ref.events.onActiveChange.addListener(function(a) {
                    if (a) {
                      return $('.marquee').show();
                    } else {
                      return $('.marquee').hide();
                    }
                  }) : void 0);
                }
                that.events.onScaleChange.addListener(function(s) {
                  return updateMarque(app.imageControls.getZoom());
                });
                textDataView = MITHgrid.Data.SubSet.initInstance({
                  dataStore: model,
                  expressions: ['!target']
                });
                x = ((_ref1 = item.x) != null ? _ref1[0] : void 0) != null ? item.x[0] : 0;
                y = ((_ref2 = item.y) != null ? _ref2[0] : void 0) != null ? item.y[0] : 0;
                width = ((_ref3 = item.width) != null ? _ref3[0] : void 0) != null ? item.width[0] : options.width - x;
                height = ((_ref4 = item.height) != null ? _ref4[0] : void 0) != null ? item.height[0] : options.height - y;
                $(textContainer).css({
                  left: Math.floor(16 + x * that.getScale()) + "px",
                  top: Math.floor(y * that.getScale()) + "px",
                  width: Math.floor(width * that.getScale()) + "px",
                  height: Math.floor(height * that.getScale()) + "px"
                });
                text = Presentation.TextContent.initInstance(rootEl, {
                  types: options.types,
                  dataView: textDataView,
                  application: options.application,
                  height: height,
                  width: width,
                  x: x,
                  y: y,
                  scale: that.getScale(),
                  inHTML: true
                });
                textDataView.setKey(id);
                rendering.getHeight = text.getHeight;
                rendering.getY = text.getY;
                rendering._destroy = function() {
                  if (text._destroy != null) {
                    text._destroy();
                  }
                  if (textDataView._destroy != null) {
                    return textDataView._destroy();
                  }
                };
                rendering.remove = function() {
                  return $(textContainer).empty();
                };
                rendering.setScale = function(s) {
                  $(textContainer).css({
                    left: Math.floor(16 + x * s) + "px",
                    top: Math.floor(y * s) + "px",
                    width: Math.floor(width * s) + "px",
                    height: Math.floor(height * s) + "px"
                  });
                  return text.setScale(s);
                };
                rendering.update = function(item) {
                  var _ref5, _ref6, _ref7, _ref8;
                  x = ((_ref5 = item.x) != null ? _ref5[0] : void 0) != null ? item.x[0] : 0;
                  y = ((_ref6 = item.y) != null ? _ref6[0] : void 0) != null ? item.y[0] : 0;
                  width = ((_ref7 = item.width) != null ? _ref7[0] : void 0) != null ? item.width[0] : options.width - x;
                  height = ((_ref8 = item.height) != null ? _ref8[0] : void 0) != null ? item.height[0] : options.height - y;
                  that.setHeight(height);
                  return $(textContainer).css({
                    left: Math.floor(16 + x * that.getScale()) + "px",
                    top: Math.floor(y * that.getScale()) + "px",
                    width: Math.floor(width * that.getScale()) + "px",
                    height: Math.floor(height * that.getScale()) + "px"
                  });
                };
                return rendering;
              });
              that.addLens('Image', function(innerContainer, view, model, id) {
                var height, htmlImage, item, renderImage, rendering, width, x, y;
                if (__indexOf.call(options.types || [], 'Image') < 0) {
                  return;
                }
                rendering = {};
                item = model.getItem(id);
                htmlImage = null;
                height = 0;
                y = 0;
                x = 0;
                width = 0;
                renderImage = function(item) {
                  var s, _ref, _ref1, _ref2, _ref3, _ref4;
                  if (((_ref = item.image) != null ? _ref[0] : void 0) != null) {
                    x = ((_ref1 = item.x) != null ? _ref1[0] : void 0) != null ? item.x[0] : 0;
                    y = ((_ref2 = item.y) != null ? _ref2[0] : void 0) != null ? item.y[0] : 0;
                    width = ((_ref3 = item.width) != null ? _ref3[0] : void 0) != null ? item.width[0] : options.width - x;
                    height = ((_ref4 = item.height) != null ? _ref4[0] : void 0) != null ? item.height[0] : options.height - y;
                    s = that.getScale();
                    if (htmlImage != null) {
                      htmlImage.remove();
                    }
                    htmlImage = $("<img></img>");
                    $(innerContainer).append(htmlImage);
                    htmlImage.attr({
                      height: Math.floor(height * s),
                      width: Math.floor(width * s),
                      src: item.image[0],
                      border: 'none'
                    });
                    return htmlImage.css({
                      position: 'absolute',
                      top: Math.floor(y * s),
                      left: Math.floor(x * s)
                    });
                  }
                };
                renderImage(item);
                rendering.setScale = function(s) {
                  if (htmlImage != null) {
                    htmlImage.attr({
                      height: Math.floor(height * s),
                      width: Math.floor(width * s)
                    });
                    return htmlImage.css({
                      top: Math.floor(y * s),
                      left: Math.floor(x * s)
                    });
                  }
                };
                rendering.getHeight = function() {
                  return height;
                };
                rendering.getY = function() {
                  return y;
                };
                rendering.update = renderImage;
                rendering.remove = function() {
                  if (htmlImage != null) {
                    htmlImage.remove();
                    return htmlImage = null;
                  }
                };
                return rendering;
              });
              return that.addLens('ImageViewer', function(innerContainer, view, model, id) {
                var baseURL, divHeight, divScale, divWidth, djatokaTileWidth, height, imgContainer, imgScale, item, offsetX, offsetY, rendering, tempBaseURL, width, x, y, zoomLevel, _ref, _ref1, _ref2, _ref3;
                if (__indexOf.call(options.types || [], 'Image') < 0) {
                  return;
                }
                rendering = {};
                djatokaTileWidth = 256;
                item = model.getItem(id);
                x = ((_ref = item.x) != null ? _ref[0] : void 0) != null ? item.x[0] : 0;
                y = ((_ref1 = item.y) != null ? _ref1[0] : void 0) != null ? item.y[0] : 0;
                width = ((_ref2 = item.width) != null ? _ref2[0] : void 0) != null ? item.width[0] : options.width - x;
                height = ((_ref3 = item.height) != null ? _ref3[0] : void 0) != null ? item.height[0] : options.height - y;
                divWidth = $(container).width() || 1;
                divHeight = $(container).height() || 1;
                divScale = that.getScale();
                imgScale = divScale;
                $(innerContainer).css({
                  'overflow': 'hidden',
                  'position': "absolute",
                  'top': 0,
                  'left': '16px'
                });
                imgContainer = $("<div></div>");
                $(innerContainer).append(imgContainer);
                app.imageControls.setActive(true);
                baseURL = item.url[0];
                tempBaseURL = baseURL.replace(/http:\/\/tiles2\.bodleian\.ox\.ac\.uk:8080\//, '/');
                rendering.update = function(item) {};
                zoomLevel = null;
                rendering.getZoom = function() {
                  return zoomLevel;
                };
                rendering.setZoom = function(z) {};
                rendering.setScale = function(s) {};
                rendering.getScale = function() {
                  return divScale;
                };
                rendering.getX = function() {};
                rendering.setX = function(x) {};
                rendering.getY = function() {};
                rendering.setY = function(y) {};
                offsetX = 0;
                offsetY = 0;
                rendering.setOffsetX = function(x) {};
                rendering.setOffsetY = function(y) {};
                rendering.getOffsetX = function() {
                  return offsetX;
                };
                rendering.getOffsetY = function() {
                  return offsetY;
                };
                rendering.remove = function() {
                  return $(imgContainer).empty();
                };
                $.ajax({
                  url: tempBaseURL + "&svc_id=info:lanl-repo/svc/getMetadata",
                  success: function(metadata) {
                    var baseZoomLevel, calcJP2KTileSize, calcTileSize, constrainCenter, i, imageURL, inDrag, original2screen, originalHeight, originalWidth, recalculateBaseZoomLevel, renderTile, renderTiles, screen2original, screenCenter, screenCoords, screenExtents, startX, startY, startoffsetX, startoffsetY, tiles, updateImageControlPosition, wrapWithImageReplacement, xTiles, yTiles, zoomLevels, _i, _setZoom;
                    originalWidth = Math.floor(metadata.width) || 1;
                    originalHeight = Math.floor(metadata.height) || 1;
                    imgScale = width / originalWidth;
                    zoomLevels = Math.floor(metadata.levels);
                    divWidth = $(container).width() || 1;
                    divHeight = $(container).height() || 1;
                    xTiles = Math.floor(originalWidth * divScale * Math.pow(2.0, zoomLevel) / djatokaTileWidth);
                    yTiles = Math.floor(originalHeight * divScale * Math.pow(2.0, zoomLevel) / djatokaTileWidth);
                    inDrag = false;
                    startX = 0;
                    startY = 0;
                    startoffsetX = offsetX;
                    startoffsetY = offsetY;
                    offsetX = 0;
                    offsetY = 0;
                    baseZoomLevel = 0;
                    recalculateBaseZoomLevel = function() {
                      divWidth = $(container).width() || 1;
                      if (that.getScale != null) {
                        baseZoomLevel = Math.max(0, Math.ceil(-Math.log(that.getScale() * imgScale) / Math.log(2)));
                        app.imageControls.setMinZoom(0);
                        return app.imageControls.setMaxZoom(zoomLevels - baseZoomLevel);
                      }
                    };
                    wrapWithImageReplacement = function(cb) {
                      var currentZ;
                      cb();
                      currentZ = Math.ceil(zoomLevel + baseZoomLevel);
                      return $(imgContainer).find("img").each(function(idx, el) {
                        var img, z;
                        img = $(el);
                        x = img.data('x');
                        y = img.data('y');
                        z = img.data('z');
                        if (z !== currentZ) {
                          return img.css({
                            "z-index": -10
                          });
                        } else {
                          return img.css({
                            "z-index": 0
                          });
                        }
                      });
                    };
                    _setZoom = function(z) {
                      var wrapper;
                      wrapper = function(cb) {
                        return cb();
                      };
                      if (z < 0) {
                        z = 0;
                      }
                      if (z > zoomLevels - baseZoomLevel) {
                        z = zoomLevels - baseZoomLevel;
                      }
                      if (z !== zoomLevel) {
                        if ((zoomLevel != null) && Math.ceil(z) !== Math.ceil(zoomLevel)) {
                          wrapper = wrapWithImageReplacement;
                        }
                        zoomLevel = z;
                        return wrapper(renderTiles);
                      }
                    };
                    rendering.setZoom = function(z) {
                      if (z !== zoomLevel) {
                        _setZoom(z);
                        return app.imageControls.setZoom(z);
                      }
                    };
                    rendering.setScale = function(s) {
                      var oldZoom, wrapper;
                      divScale = s;
                      $(innerContainer).css({
                        width: originalWidth * divScale * imgScale,
                        height: originalHeight * divScale * imgScale
                      });
                      oldZoom = baseZoomLevel;
                      recalculateBaseZoomLevel();
                      if (oldZoom !== baseZoomLevel) {
                        zoomLevel = zoomLevel - baseZoomLevel + oldZoom;
                        if (zoomLevel > zoomLevels - baseZoomLevel) {
                          zoomLevel = zoomLevels - baseZoomLevel;
                        }
                        if (zoomLevel < 0) {
                          zoomLevel = 0;
                        }
                        wrapper = wrapWithImageReplacement;
                      } else {
                        wrapper = function(cb) {
                          return cb();
                        };
                      }
                      return wrapper(renderTiles);
                    };
                    if (typeof that.onDestroy === "function") {
                      that.onDestroy(app.imageControls.events.onZoomChange.addListener(rendering.setZoom));
                    }
                    updateImageControlPosition = function() {
                      return app.imageControls.setImgPosition({
                        topLeft: {
                          x: offsetX * imgScale,
                          y: offsetY * imgScale
                        }
                      });
                    };
                    recalculateBaseZoomLevel();
                    tiles = [];
                    for (i = _i = 0; 0 <= zoomLevels ? _i <= zoomLevels : _i >= zoomLevels; i = 0 <= zoomLevels ? ++_i : --_i) {
                      tiles[i] = [];
                    }
                    imageURL = function(x, y, z) {
                      var tileWidth;
                      tileWidth = Math.pow(2.0, zoomLevels - z) * djatokaTileWidth;
                      return [baseURL, "svc_id=info:lanl-repo/svc/getRegion", "svc_val_fmt=info:ofi/fmt:kev:mtx:jpeg2000", "svc.format=image/jpeg", "svc.level=" + z, "svc.region=" + (y * tileWidth) + "," + (x * tileWidth) + "," + djatokaTileWidth + "," + djatokaTileWidth].join("&");
                    };
                    screenCenter = function() {
                      return original2screen(offsetX, offsetY);
                    };
                    calcJP2KTileSize = function() {
                      return Math.pow(2.0, zoomLevels - Math.ceil(zoomLevel + baseZoomLevel)) * djatokaTileWidth;
                    };
                    calcTileSize = function() {
                      return Math.floor(Math.pow(2.0, zoomLevel) * divScale * imgScale * calcJP2KTileSize());
                    };
                    screenCoords = function(x, y) {
                      var center, left, tileSize, top;
                      tileSize = calcTileSize();
                      top = y * tileSize;
                      left = x * tileSize;
                      center = screenCenter();
                      return {
                        top: top + center.top,
                        left: left + center.left
                      };
                    };
                    original2screen = function(ox, oy) {
                      return {
                        left: ox * divScale * imgScale * Math.pow(2.0, zoomLevel),
                        top: oy * divScale * imgScale * Math.pow(2.0, zoomLevel)
                      };
                    };
                    screen2original = function(ox, oy) {
                      return {
                        left: ox / divScale / imgScale / Math.pow(2.0, zoomLevel),
                        top: oy / divScale / imgScale / Math.pow(2.0, zoomLevel)
                      };
                    };
                    constrainCenter = function() {
                      var changed, sizes;
                      changed = false;
                      if (zoomLevel === 0) {
                        if (!(offsetX === 0 && offsetY === 0)) {
                          changed = true;
                        }
                        offsetX = 0;
                        offsetY = 0;
                      } else {
                        sizes = screen2original(divWidth, divHeight);
                        if (offsetX > 0) {
                          changed = true;
                          offsetX = 0;
                        }
                        if (offsetY > 0) {
                          changed = true;
                          offsetY = 0;
                        }
                        if (offsetX < -originalWidth + sizes.left) {
                          changed = true;
                          offsetX = -originalWidth + sizes.left;
                        }
                        if (offsetY < -originalHeight + sizes.top) {
                          changed = true;
                          offsetY = -originalHeight + sizes.top;
                        }
                      }
                      return changed;
                    };
                    screenExtents = function(x, y) {
                      var jp2kTileSize, scale, tileSize;
                      tileSize = calcTileSize();
                      jp2kTileSize = calcJP2KTileSize();
                      if ((x + 1) * jp2kTileSize > originalWidth) {
                        width = originalWidth - x * jp2kTileSize;
                      } else {
                        width = jp2kTileSize;
                      }
                      if ((y + 1) * jp2kTileSize > originalHeight) {
                        height = originalHeight - y * jp2kTileSize;
                      } else {
                        height = jp2kTileSize;
                      }
                      scale = tileSize / jp2kTileSize;
                      return {
                        width: Math.max(0, width * scale),
                        height: Math.max(0, height * scale)
                      };
                    };
                    renderTile = function(o) {
                      var heightWidth, imgEl, topLeft, z, _base, _name, _ref4, _ref5;
                      z = Math.ceil(zoomLevel + baseZoomLevel);
                      topLeft = screenCoords(o.x, o.y);
                      heightWidth = screenExtents(o.x, o.y);
                      if (heightWidth.height === 0 || heightWidth.width === 0) {
                        return;
                      }
                      if (((_ref4 = tiles[z]) != null ? (_ref5 = _ref4[o.x]) != null ? _ref5[o.y] : void 0 : void 0) != null) {
                        imgEl = tiles[z][o.x][o.y];
                      }
                      if (topLeft.left + heightWidth.width < 0 || topLeft.left > divWidth || topLeft.top + heightWidth.height < 0 || topLeft.top > divHeight) {
                        if (imgEl != null) {
                          imgEl.hide();
                        }
                        return;
                      }
                      if (imgEl != null) {
                        imgEl.show();
                      } else {
                        imgEl = $("<img></img>");
                        $(imgContainer).append(imgEl);
                        imgEl.attr({
                          'data-x': o.x,
                          'data-y': o.y,
                          'data-z': z,
                          border: 'none',
                          src: imageURL(o.x, o.y, z)
                        });
                        if (tiles[z] == null) {
                          tiles[z] = [];
                        }
                        if ((_base = tiles[z])[_name = o.x] == null) {
                          _base[_name] = [];
                        }
                        tiles[z][o.x][o.y] = imgEl;
                        (function(imgEl) {
                          imgEl.bind('mousedown', function(evt) {
                            if (!inDrag) {
                              evt.preventDefault();
                              startX = null;
                              startY = null;
                              startoffsetX = offsetX;
                              startoffsetY = offsetY;
                              inDrag = true;
                              return MITHgrid.mouse.capture(function(type) {
                                var e, scoords;
                                e = this;
                                switch (type) {
                                  case "mousemove":
                                    if ((startX == null) || (startY == null)) {
                                      startX = e.pageX;
                                      startY = e.pageY;
                                    }
                                    scoords = screen2original(startX - e.pageX, startY - e.pageY);
                                    offsetX = startoffsetX - scoords.left;
                                    offsetY = startoffsetY - scoords.top;
                                    renderTiles();
                                    return updateImageControlPosition();
                                  case "mouseup":
                                    inDrag = false;
                                    return MITHgrid.mouse.uncapture();
                                }
                              });
                            }
                          });
                          return imgEl.bind('mousewheel DOMMouseScroll MozMousePixelScroll', function(e) {
                            var oldOffsetX, oldOffsetY, scrollPoint;
                            e.preventDefault();
                            inDrag = false;
                            x = e.originalEvent.offsetX + parseInt($(imgEl).css('left'), 10);
                            y = e.originalEvent.offsetY + parseInt($(imgEl).css('top'), 10);
                            z = rendering.getZoom();
                            oldOffsetX = offsetX;
                            oldOffsetY = offsetY;
                            scrollPoint = screen2original(x, y);
                            oldOffsetX -= scrollPoint.left;
                            oldOffsetY -= scrollPoint.top;
                            if (z >= 0 && z <= zoomLevels - baseZoomLevel) {
                              rendering.setZoom((z + 1) * (1 + e.originalEvent.wheelDeltaY / 500) - 1);
                              if ($(imgEl).data('z') === Math.ceil(zoomLevel + baseZoomLevel)) {
                                scrollPoint = screen2original(x, y);
                                oldOffsetX += scrollPoint.left;
                                oldOffsetY += scrollPoint.top;
                                offsetX = oldOffsetX;
                                offsetY = oldOffsetY;
                                return renderTiles();
                              }
                            }
                          });
                        })(imgEl);
                      }
                      return imgEl.css({
                        position: 'absolute',
                        top: topLeft.top,
                        left: topLeft.left,
                        width: heightWidth.width,
                        height: heightWidth.height
                      });
                    };
                    renderTiles = function() {
                      var j, tileSize, _j, _results;
                      divWidth = $(container).width() || 1;
                      divHeight = $(container).height() || 1;
                      if (constrainCenter()) {
                        updateImageControlPosition();
                      }
                      tileSize = calcTileSize();
                      xTiles = Math.floor(originalWidth * divScale * imgScale * Math.pow(2.0, zoomLevel) / tileSize);
                      yTiles = Math.floor(originalHeight * divScale * imgScale * Math.pow(2.0, zoomLevel) / tileSize);
                      _results = [];
                      for (j = _j = 0; 0 <= yTiles ? _j <= yTiles : _j >= yTiles; j = 0 <= yTiles ? ++_j : --_j) {
                        _results.push((function() {
                          var _k, _results1;
                          _results1 = [];
                          for (i = _k = 0; 0 <= xTiles ? _k <= xTiles : _k >= xTiles; i = 0 <= xTiles ? ++_k : --_k) {
                            _results1.push(renderTile({
                              x: i,
                              y: j,
                              tileSize: tileSize
                            }));
                          }
                          return _results1;
                        })());
                      }
                      return _results;
                    };
                    rendering.setOffsetX = function(x) {
                      offsetX = x;
                      renderTiles();
                      return updateImageControlPosition();
                    };
                    rendering.setOffsetY = function(y) {
                      offsetY = y;
                      renderTiles();
                      return updateImageControlPosition();
                    };
                    rendering.addoffsetX = function(dx) {
                      return rendering.setOffsetX(offsetX + dx);
                    };
                    rendering.addoffsetY = function(dy) {
                      return rendering.setOffsetY(offsetY + dy);
                    };
                    return rendering.setZoom(0);
                  }
                });
                return rendering;
              });
            }]));
          };
        });
        return Presentation.namespace("Canvas", function(Canvas) {
          return Canvas.initInstance = function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Presentation.Canvas"].concat(__slice.call(args), [function(that, container) {
              var DivHeight, DivWidth, annoExpr, baseFontSize, canvasHeight, canvasWidth, dataView, options, realCanvas, resizer, viewEl;
              options = that.options;
              annoExpr = that.dataView.prepare(['!target']);
              container.css({
                'overflow': 'hidden'
              });
              viewEl = $("<div></div>");
              container.append(viewEl);
              $(viewEl).height(Math.floor($(container).width() * 4 / 3));
              $(viewEl).css({
                'background-color': 'white',
                'z-index': 0
              });
              canvasWidth = null;
              canvasHeight = null;
              baseFontSize = 150;
              DivHeight = null;
              DivWidth = Math.floor($(container).width() * 20 / 20);
              $(container).height(Math.floor($(container).width() * 4 / 3));
              resizer = function() {
                DivWidth = Math.floor($(container).width() * 20 / 20, 10);
                if ((canvasWidth != null) && canvasWidth > 0) {
                  that.setScale(DivWidth / canvasWidth);
                }
                if ((canvasHeight != null) && canvasHeight > 0) {
                  return $(container).height(DivHeight = Math.floor(canvasHeight * that.getScale()));
                }
              };
              MITHgrid.events.onWindowResize.addListener(resizer);
              $(viewEl).css({
                'border': '1px solid grey',
                'background-color': 'white'
              });
              that.events.onScaleChange.addListener(function(s) {
                if ((canvasWidth != null) && (canvasHeight != null)) {
                  DivHeight = Math.floor(canvasHeight * s);
                }
                $(viewEl).css({
                  'font-size': (Math.floor(baseFontSize * s * 10) / 10) + "px",
                  'line-height': (Math.floor(baseFontSize * s * 11.5) / 10) + "px",
                  'height': DivHeight,
                  'width': DivWidth
                });
                if (typeof realCanvas !== "undefined" && realCanvas !== null) {
                  realCanvas.setScale(s);
                }
                return $(container).trigger("sizeChange", [
                  {
                    w: $(container).width(),
                    h: $(container).height()
                  }
                ]);
              });
              dataView = MITHgrid.Data.SubSet.initInstance({
                dataStore: options.dataView,
                expressions: ['!target'],
                key: null
              });
              realCanvas = null;
              $(container).on("resetPres", function() {
                resizer();
                if (realCanvas != null) {
                  if (realCanvas.hide != null) {
                    realCanvas.hide();
                  }
                  if (realCanvas._destroy != null) {
                    realCanvas._destroy();
                  }
                }
                $(viewEl).empty();
                return realCanvas = SGA.Reader.Presentation.Zone.initInstance(viewEl, {
                  types: options.types,
                  dataView: dataView,
                  application: options.application,
                  height: canvasHeight,
                  width: canvasWidth,
                  scale: DivWidth / canvasWidth
                });
              });
              return that.events.onCanvasChange.addListener(function(canvas) {
                var item, _ref, _ref1;
                dataView.setKey(canvas);
                item = dataView.getItem(canvas);
                canvasWidth = ((_ref = item.width) != null ? _ref[0] : void 0) || 1;
                canvasHeight = ((_ref1 = item.height) != null ? _ref1[0] : void 0) || 1;
                resizer();
                if (realCanvas != null) {
                  if (realCanvas.hide != null) {
                    realCanvas.hide();
                  }
                  if (realCanvas._destroy != null) {
                    realCanvas._destroy();
                  }
                }
                $(viewEl).empty();
                realCanvas = SGA.Reader.Presentation.Zone.initInstance(viewEl, {
                  types: options.types,
                  dataView: dataView,
                  application: options.application,
                  height: canvasHeight,
                  width: canvasWidth,
                  scale: DivWidth / canvasWidth
                });
                that.setHeight(canvasHeight);
                return realCanvas.events.onHeightChange.addListener(that.setHeight);
              });
            }]));
          };
        });
      });
      SGAReader.namespace("Data", function(Data) {
        Data.namespace("StyleStore", function(StyleStore) {
          return StyleStore.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, __slice.call(args).concat([function(that) {
              var docs, options, regex;
              options = that.options;
              docs = {};
              regex = new RegExp("(?:\\.(\\S+)\\s*\\{\\s*([^}]*)\\s*\\})", "mg");
              that.addStyles = function(id, css) {
                var results, _results;
                if (docs[id] != null) {
                  return;
                }
                docs[id] = {};
                results = regex.exec(css);
                _results = [];
                while ((results != null ? results.index : void 0) != null) {
                  docs[id][results[1]] = results[2];
                  _results.push(results = regex.exec(css));
                }
                return _results;
              };
              return that.getStylesForClass = function(id, klass) {
                var _ref;
                if (((_ref = docs[id]) != null ? _ref[klass] : void 0) != null) {
                  return docs[id][klass];
                } else {
                  return "";
                }
              };
            }]));
          };
        });
        Data.namespace("TextStore", function(TextStore) {
          return TextStore.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, __slice.call(args).concat([function(that) {
              var fileContents, loadingFiles, options, pendingFiles;
              options = that.options;
              fileContents = {};
              loadingFiles = {};
              pendingFiles = {};
              that.addFile = function(files) {
                var file, _i, _len, _results;
                if (!$.isArray(files)) {
                  files = [files];
                }
                _results = [];
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  file = files[_i];
                  _results.push((function(file) {
                    if ((file != null) && (fileContents[file] == null) && (loadingFiles[file] == null)) {
                      loadingFiles[file] = [];
                      return $.ajax({
                        url: file,
                        type: 'GET',
                        processData: false,
                        success: function(data) {
                          var c, f, _j, _len1, _ref;
                          c = data.documentElement.textContent;
                          fileContents[file] = c;
                          _ref = loadingFiles[file];
                          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                            f = _ref[_j];
                            f(c);
                          }
                          return delete loadingFiles[file];
                        }
                      });
                    }
                  })(file));
                }
                return _results;
              };
              return that.withFile = function(file, cb) {
                if (fileContents[file] != null) {
                  return cb(fileContents[file]);
                } else if (loadingFiles[file] != null) {
                  return loadingFiles[file].push(cb);
                } else {
                  that.addFile(file);
                  return loadingFiles[file].push(cb);
                }
              };
            }]));
          };
        });
        return Data.namespace("Manifest", function(Manifest) {
          var NS, types;
          NS = {
            "http://dms.stanford.edu/ns/": "sc",
            "http://www.shared-canvas.org/ns/": "sc",
            "http://www.w3.org/2000/01/rdf-schema#": "rdfs",
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#": "rdf",
            "http://www.w3.org/2003/12/exif/ns#": "exif",
            "http://purl.org/dc/elements/1.1/": "dc",
            "http://www.w3.org/ns/openannotation/core/": "oa",
            "http://www.openannotation.org/ns/": "oa",
            "http://www.w3.org/ns/openannotation/extension/": "oax",
            "http://www.openarchives.org/ore/terms/": "ore",
            "http://www.shelleygodwinarchive.org/ns/1#": "sga",
            "http://www.shelleygodwinarchive.org/ns1#": "sga",
            "http://www.w3.org/2011/content#": "cnt",
            "http://purl.org/dc/dcmitype/": "dctypes"
          };
          types = {
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#type": "item",
            "http://www.w3.org/ns/openannotation/core/hasMotivation": "item"
          };
          return Manifest.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Data.Manifest"].concat(__slice.call(args), [function(that) {
              var data, flushSearchResults, getSearchResultCanvases, importFromURL, importer, itemsForCanvas, itemsWithType, loadedUrls, options;
              options = that.options;
              data = MITHgrid.Data.Store.initInstance();
              that.size = function() {
                return data.size();
              };
              importer = MITHgrid.Data.Importer.RDF_JSON.initInstance(data, NS, types);
              loadedUrls = [];
              importFromURL = function(url, cb) {
                if (__indexOf.call(loadedUrls, url) >= 0) {
                  cb();
                  return;
                }
                loadedUrls.push(url);
                that.addItemsToProcess(1);
                return $.ajax({
                  url: url,
                  type: 'GET',
                  contentType: 'application/rdf+json',
                  processData: false,
                  dataType: 'json',
                  success: function(data) {
                    that.addItemsProcessed(1);
                    return that.importJSON(data, cb);
                  },
                  error: function(e) {
                    that.addItemsProcessed(1);
                    throw new Error("Could not load the manifest");
                  }
                });
              };
              that.importJSON = function(json, cb) {
                var syncer;
                syncer = MITHgrid.initSynchronizer(cb);
                syncer.increment();
                importer["import"](json, function(ids) {
                  var idset, urls;
                  idset = MITHgrid.Data.Set.initInstance(ids);
                  urls = data.getObjectsUnion(idset, 'oreisDescribedBy');
                  urls.visit(function(url) {
                    syncer.increment();
                    return importFromURL(url, syncer.decrement);
                  });
                  return syncer.decrement();
                });
                return syncer.done();
              };
              itemsWithType = function(type) {
                if (!$.isArray(type)) {
                  type = [type];
                }
                types = MITHgrid.Data.Set.initInstance(type);
                return data.getSubjectsUnion(types, "type").items();
              };
              itemsForCanvas = function(canvas) {
                var annos, canvasSet, contentAnnotations, imageAnnotations, specificResources, specificResourcesAnnos, tei, teiURL;
                if (!$.isArray(canvas)) {
                  canvas = [canvas];
                }
                canvasSet = MITHgrid.Data.Set.initInstance(canvas);
                specificResources = data.getSubjectsUnion(canvasSet, "oahasSource");
                imageAnnotations = data.getSubjectsUnion(canvasSet, "oahasTarget");
                contentAnnotations = data.getSubjectsUnion(specificResources, "oahasTarget");
                tei = data.getObjectsUnion(contentAnnotations, 'oahasBody');
                teiURL = data.getObjectsUnion(tei, 'oahasSource');
                specificResourcesAnnos = data.getSubjectsUnion(teiURL, 'oahasSource');
                annos = data.getSubjectsUnion(specificResourcesAnnos, 'oahasTarget').items();
                return annos.concat(imageAnnotations.items(), contentAnnotations.items());
              };
              flushSearchResults = function() {
                var searchResults;
                types = MITHgrid.Data.Set.initInstance(['sgaSearchAnnotation']);
                searchResults = data.getSubjectsUnion(types, "type").items();
                return data.removeItems(searchResults);
              };
              getSearchResultCanvases = function() {
                var annos, canvasKeys, searchResults, sources, specificResources, step, teiURL;
                types = MITHgrid.Data.Set.initInstance(['sgaSearchAnnotation']);
                searchResults = data.getSubjectsUnion(types, "type");
                specificResources = data.getObjectsUnion(searchResults, "oahasTarget");
                teiURL = data.getObjectsUnion(specificResources, 'oahasSource');
                sources = data.getSubjectsUnion(teiURL, 'oahasSource');
                annos = data.getSubjectsUnion(sources, 'oahasBody');
                step = data.getObjectsUnion(annos, 'oahasTarget');
                canvasKeys = data.getObjectsUnion(step, 'oahasSource');
                return $.unique(canvasKeys.items());
              };
              that.getCanvases = function() {
                return itemsWithType('scCanvas');
              };
              that.getZones = function() {
                return itemsWithType('scZone');
              };
              that.getSequences = function() {
                return itemsWithType('scSequence');
              };
              that.getAnnotations = function() {
                return itemsWithType('oaAnnotation');
              };
              that.getRanges = function() {
                return itemsWithType('scRange');
              };
              that.getLayers = function() {
                return itemsWithType('scLayer');
              };
              that.getManifests = function() {
                return itemsWithType('scManifest');
              };
              that.getAnnotationsForCanvas = itemsForCanvas;
              that.flushSearchResults = flushSearchResults;
              that.getSearchResultCanvases = getSearchResultCanvases;
              that.getItem = data.getItem;
              that.contains = data.contains;
              return that.importFromURL = function(url, cb) {
                return importFromURL(url, function() {
                  if (cb != null) {
                    return cb();
                  }
                });
              };
            }]));
          };
        });
      });
      SGAReader.namespace("Component", function(Component) {
        Component.namespace("ProgressBar", function(ProgressBar) {
          return ProgressBar.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.ProgressBar"].concat(__slice.call(args), [function(that, container) {
              that.events.onNumeratorChange.addListener(function(n) {
                var percent;
                percent = parseInt(100 * n / that.getDenominator(), 10);
                if (percent > 100) {
                  percent = 100;
                }
                return $(container).find(".bar").css("width", percent + "%");
              });
              that.events.onDenominatorChange.addListener(function(d) {
                var percent;
                percent = parseInt(100 * that.getNumerator() / d, 10);
                if (percent > 100) {
                  percent = 100;
                }
                return $(container).find(".bar").css("width", percent + "%");
              });
              that.show = function() {
                return $(container).show();
              };
              return that.hide = function() {
                return $(container).hide();
              };
            }]));
          };
        });
        Component.namespace("Spinner", function(Spinner) {
          return Spinner.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.Spinner"].concat(__slice.call(args), [function(that, container) {
              var x, y;
              x = $(window).width();
              y = $(window).height();
              if (x < 1) {
                x = y;
              }
              x -= $(container).width();
              y -= $(container).height();
              if (x < 1) {
                x = y * 2;
              }
              $(container).css({
                position: "absolute",
                "z-index": 10000,
                top: "50%",
                left: "50%"
              });
              that.show = function() {
                return $(container).show();
              };
              return that.hide = function() {
                return $(container).hide();
              };
            }]));
          };
        });
        Component.namespace("SequenceSelector", function(SequenceSelector) {
          return SequenceSelector.initInstance = function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Component.SequenceSelector"].concat(__slice.call(args), [function(that, container) {
              var options;
              options = that.options;
              return that.addLens('Sequence', function(container, view, model, id) {
                var el, item, rendering, _ref;
                that.setSequence(id);
                if ($(container).is("select")) {
                  rendering = {};
                  item = model.getItem(id);
                  el = $("<option></option>");
                  el.attr({
                    value: id
                  });
                  el.text((_ref = item.label) != null ? _ref[0] : void 0);
                  $(container).append(el);
                  $(container).change(function() {
                    return that.setSequence($(container).val());
                  });
                  that.events.onSequenceChange.addListener(function(v) {
                    return $(container).val(v);
                  });
                  return that.finishDisplayUpdate = function() {
                    return that.setSequence($(container).val());
                  };
                }
              });
            }]));
          };
        });
        Component.namespace("Slider", function(Slider) {
          return Slider.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.Slider"].concat(__slice.call(args), [function(that, container) {
              var options;
              options = that.options;
              $('.canvas').on("searchResultsChange", function(e, results) {
                var $c, adjustment, pages, r, res_h_perc, res_height, s_max, s_min, valPercent, _i, _len, _results;
                $c = $(container);
                $('.res').remove();
                pages = that.getMax();
                try {
                  _results = [];
                  for (_i = 0, _len = results.length; _i < _len; _i++) {
                    r = results[_i];
                    r = r + 1;
                    res_height = $c.height() / (pages + 1);
                    res_h_perc = (pages + 1) / 100;
                    s_min = $c.slider("option", "min");
                    s_max = $c.slider("option", "max");
                    valPercent = 100 - ((r - s_min) / (s_max - s_min) * 100);
                    adjustment = res_h_perc / 2;
                    _results.push($c.append("<div style='bottom:" + (valPercent + adjustment) + "%; height:" + res_height + "px' class='res ui-slider-range ui-widget-header ui-corner-all'> </div>"));
                  }
                  return _results;
                } catch (_error) {
                  e = _error;
                  return console.log("Unable to update slider with search results");
                }
              });
              that.events.onMaxChange.addListener(function(n) {
                var e, pages;
                try {
                  if ($(container).data("slider")) {
                    $(container).slider({
                      max: n
                    });
                  } else {
                    pages = n;
                    $(container).slider({
                      orientation: "vertical",
                      range: "min",
                      min: that.getMin(),
                      max: pages,
                      value: pages,
                      step: 1,
                      slide: function(event, ui) {
                        if (options.getLabel != null) {
                          return $(ui.handle).text(options.getLabel(pages - ui.value));
                        }
                      },
                      stop: function(event, ui) {
                        0;
                        return that.setValue(pages - ui.value);
                      }
                    });
                    if (options.getLabel != null) {
                      $(container).find("a").text(options.getLabel(0));
                    }
                    $('.canvas').on("sizeChange", function(e, d) {
                      var $c;
                      $c = $(container);
                      $c.height(d.h);
                      return $('.canvas').unbind("sizeChange");
                    });
                  }
                  if ((that.getValue() != null) && parseInt(that.getValue()) !== NaN) {
                    $.bbq.pushState({
                      n: that.getValue() + 1
                    });
                    return $(container).slider({
                      value: pages - that.getValue()
                    });
                  }
                } catch (_error) {
                  e = _error;
                  return console.log("Unable to update maximum value of slider");
                }
              });
              that.events.onMinChange.addListener(function(n) {
                var e;
                try {
                  if ($(container).data("slider")) {
                    return $(container).slider({
                      min: n
                    });
                  }
                } catch (_error) {
                  e = _error;
                  return console.log("Unable to update minimum value of slider");
                }
              });
              return that.events.onValueChange.addListener(function(n) {
                var e;
                try {
                  if ($(container).data("slider")) {
                    $(container).slider({
                      value: that.getMax() - n
                    });
                  }
                  if (options.getLabel != null) {
                    $(container).find("a").text(options.getLabel(n));
                  }
                  if ((that.getValue() != null) && parseInt(that.getValue()) !== NaN) {
                    return $.bbq.pushState({
                      n: that.getValue() + 1
                    });
                  }
                } catch (_error) {
                  e = _error;
                  return console.log("Unable to update value of slider");
                }
              });
            }]));
          };
        });
        Component.namespace("PagerControls", function(PagerControls) {
          return PagerControls.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.PagerControls"].concat(__slice.call(args), [function(that, container) {
              var firstEl, lastEl, nextEl, prevEl, updateBBQ;
              $(window).bind("hashchange", function(e) {
                var n;
                n = $.bbq.getState("n");
                if ((n != null) && parseInt(n) !== NaN) {
                  return that.setValue(n - 1);
                }
              });
              firstEl = $(container).find("#first-page");
              prevEl = $(container).find("#prev-page");
              nextEl = $(container).find("#next-page");
              lastEl = $(container).find("#last-page");
              that.events.onMinChange.addListener(function(n) {
                if (n < that.getValue()) {
                  firstEl.removeClass("disabled");
                  return prevEl.removeClass("disabled");
                } else {
                  firstEl.addClass("disabled");
                  return prevEl.addClass("disabled");
                }
              });
              that.events.onMaxChange.addListener(function(n) {
                if (n > that.getValue()) {
                  nextEl.removeClass("disabled");
                  return lastEl.removeClass("disabled");
                } else {
                  nextEl.addClass("disabled");
                  return lastEl.addClass("disabled");
                }
              });
              that.events.onValueChange.addListener(function(n) {
                if (n > that.getMin()) {
                  firstEl.removeClass("disabled");
                  prevEl.removeClass("disabled");
                } else {
                  firstEl.addClass("disabled");
                  prevEl.addClass("disabled");
                }
                if (n < that.getMax()) {
                  nextEl.removeClass("disabled");
                  return lastEl.removeClass("disabled");
                } else {
                  nextEl.addClass("disabled");
                  return lastEl.addClass("disabled");
                }
              });
              updateBBQ = function() {
                if ((that.getValue() != null) && parseInt(that.getValue()) !== NaN) {
                  return $.bbq.pushState({
                    n: that.getValue() + 1
                  });
                }
              };
              $(prevEl).click(function(e) {
                e.preventDefault();
                that.addValue(-1);
                return updateBBQ();
              });
              $(nextEl).click(function(e) {
                e.preventDefault();
                that.addValue(1);
                return updateBBQ();
              });
              $(firstEl).click(function(e) {
                e.preventDefault();
                that.setValue(that.getMin());
                return updateBBQ();
              });
              return $(lastEl).click(function(e) {
                e.preventDefault();
                that.setValue(that.getMax());
                return updateBBQ();
              });
            }]));
          };
        });
        Component.namespace("ImageControls", function(ImageControls) {
          return ImageControls.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.ImageControls"].concat(__slice.call(args), [function(that, container) {
              var inEl, marqueeEl, outEl, resetEl;
              resetEl = $(container).find("#zoom-reset");
              inEl = $(container).find("#zoom-in");
              outEl = $(container).find("#zoom-out");
              marqueeEl = $(container).find("#marquee-sh");
              $(resetEl).click(function(e) {
                e.preventDefault();
                that.setZoom(that.getMinZoom());
                return that.setImgPosition({
                  topLeft: {
                    x: 0,
                    y: 0
                  },
                  bottomRight: {
                    x: 0,
                    y: 0
                  }
                });
              });
              $(inEl).click(function(e) {
                var zoom;
                e.preventDefault();
                zoom = that.getZoom();
                if (Math.floor(zoom + 1 <= that.getMaxZoom())) {
                  return that.setZoom(Math.floor(zoom + 1));
                }
              });
              $(outEl).click(function(e) {
                var minZoom, zoom;
                e.preventDefault();
                zoom = that.getZoom();
                minZoom = that.getMinZoom();
                if (Math.floor(zoom - 1 > minZoom)) {
                  return that.setZoom(Math.floor(zoom - 1));
                } else if (Math.floor(zoom - 1 === Math.floor(minZoom))) {
                  return that.setZoom(minZoom);
                }
              });
              return $(marqueeEl).click(function(e) {
                var marquees;
                e.preventDefault();
                marquees = $('.marquee');
                return marquees.each(function(i, m) {
                  m = $(m);
                  if (m.css("display") !== "none") {
                    return m.hide();
                  } else {
                    return m.show();
                  }
                });
              });
            }]));
          };
        });
        Component.namespace("SearchBox", function(SearchBox) {
          return SearchBox.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.SearchBox"].concat(__slice.call(args), [function(that, service) {
              var container, srcButton, srcForm;
              that.events.onQueryChange.addListener(function(q) {
                q = q.replace(/\=/g, ':');
                q = q.replace(/\&/g, '|');
                return $.bbq.pushState({
                  s: q
                });
              });
              container = args[0];
              that.setServiceURL(service);
              srcButton = $('#search-btn');
              srcForm = $(container).closest('form');
              if (srcButton != null) {
                srcButton.click(function() {
                  return srcForm.submit();
                });
              }
              return srcForm.submit(function(e) {
                var f, fields, fields_html, i, val, _i, _len;
                e.preventDefault();
                fields_html = $('#limit-search').find('input:checked');
                fields = "";
                if (fields_html.length === 0) {
                  fields = "text";
                } else {
                  for (i = _i = 0, _len = fields_html.length; _i < _len; i = ++_i) {
                    f = fields_html[i];
                    fields += $(f).val();
                    if (i + 1 !== fields_html.length) {
                      fields += ',';
                    }
                  }
                }
                val = $(container).find('input').val();
                if (!val.match('^\s*$')) {
                  that.setQuery("f=" + fields + "&q=" + val);
                }
                return false;
              });
            }]));
          };
        });
        Component.namespace("ModeLayers", function(ModeLayers) {
          return ModeLayers.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.ModeLayers"].concat(__slice.call(args), [function(that, container) {
              var canvas, get, hide, layerAnnos, show, text, xml;
              canvas = null;
              text = null;
              xml = null;
              layerAnnos = [];
              get = function() {
                var a, data, las, layerA, _i, _len, _ref, _results;
                data = that.options.dataView;
                las = MITHgrid.Data.Set.initInstance(['LayerAnno']);
                _ref = data.getSubjectsUnion(las, "type").items();
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  layerA = _ref[_i];
                  a = data.getItem(layerA);
                  _results.push(layerAnnos.push(a));
                }
                return _results;
              };
              show = function() {
                if (that.options.getMode() === 'xml') {
                  $(container).html(xml);
                  prettyPrint();
                } else {
                  $(container).html(text);
                }
                return $(container).show();
              };
              hide = function() {
                return $(container).hide();
              };
              that.options.dataView.events.onAfterLoading.addListener(function(d) {
                return get();
              });
              that.options.pagerEvt.addListener(function(canvas) {
                var a, c, _i, _len, _results;
                c = c;
                $(container).height($('.canvas').height());
                _results = [];
                for (_i = 0, _len = layerAnnos.length; _i < _len; _i++) {
                  a = layerAnnos[_i];
                  if (a.canvas[0] === canvas) {
                    if (a.motivation[0] === "http://www.shelleygodwinarchive.org/ns1#reading") {
                      _results.push($.get(a.body, function(data) {
                        var d, e, _j, _len1, _results1;
                        d = $.parseHTML(data);
                        _results1 = [];
                        for (_j = 0, _len1 = d.length; _j < _len1; _j++) {
                          e = d[_j];
                          if ($(e).is('div')) {
                            text = e;
                            if (that.options.getMode() === 'reading') {
                              _results1.push($(container).html(text));
                            } else {
                              _results1.push(void 0);
                            }
                          } else {
                            _results1.push(void 0);
                          }
                        }
                        return _results1;
                      }));
                    } else if (a.motivation[0] === "http://www.shelleygodwinarchive.org/ns1#source") {
                      _results.push($.get(a.body, function(data) {
                        var serializer, surface, txtdata;
                        surface = data.getElementsByTagName('surface');
                        serializer = new XMLSerializer();
                        txtdata = serializer.serializeToString(surface[0]);
                        txtdata = txtdata.replace(/\&/g, '&amp;');
                        txtdata = txtdata.replace(/%/g, '&#37;');
                        txtdata = txtdata.replace(/</g, '&lt;');
                        txtdata = txtdata.replace(/>/g, '&gt;');
                        xml = "<pre class='prettyprint'><code class='language-xml'>" + txtdata + "</code></pre>";
                        if (that.options.getMode() === 'xml') {
                          $(container).html(xml);
                          return prettyPrint();
                        }
                      }));
                    } else {
                      _results.push(void 0);
                    }
                  } else {
                    _results.push(void 0);
                  }
                }
                return _results;
              });
              return that.options.onModeChange.addListener(function(m) {
                switch (m) {
                  case 'reading':
                    $(container).removeClass('xml');
                    return show();
                  case 'xml':
                    $(container).addClass('xml');
                    return show();
                  default:
                    return hide();
                }
              });
            }]));
          };
        });
        Component.namespace("ModeControls", function(ModeControls) {
          return ModeControls.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.ModeControls"].concat(__slice.call(args), [function(that, container) {
              var imgBinding, modeController, options, rdgBinding, restoreBoth, stdBinding, stored_txt_canvas, xmlBinding;
              options = that.options;
              stored_txt_canvas = null;
              restoreBoth = function() {
                var c, img_parent;
                img_parent = $('*[data-types=Image]').parent();
                c = /(col-[^-]+?-)(\d+)/g.exec($('*[data-types=Image]').parent()[0].className);
                img_parent[0].className = c[1] + parseInt(c[2]) / 2;
                stored_txt_canvas.insertAfter(img_parent);
                $('*[data-types=Image]').trigger('resetPres');
                stored_txt_canvas = null;
                return that.setMode('normal');
              };
              modeController = SGA.Reader.Controller.ModeSelector.initInstance();
              rdgBinding = modeController.bind('#mode-rdg', {
                mode: 'reading'
              });
              xmlBinding = modeController.bind('#mode-xml', {
                mode: 'xml'
              });
              stdBinding = modeController.bind('#mode-std', {
                mode: 'normal'
              });
              imgBinding = modeController.bind('#img-only', {
                mode: 'imgOnly'
              });
              rdgBinding.events.onModeSelect.addListener(that.setMode);
              xmlBinding.events.onModeSelect.addListener(that.setMode);
              stdBinding.events.onModeSelect.addListener(that.setMode);
              imgBinding.events.onModeSelect.addListener(that.setMode);
              that.events.onModeChange.addListener(function(m) {
                var thing, _i, _len, _ref;
                _ref = [rdgBinding, xmlBinding, stdBinding, imgBinding];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  thing = _ref[_i];
                  thing.eventModeSelect(m);
                }
                return $.bbq.pushState({
                  m: m
                });
              });
              rdgBinding.onSelect = function() {
                if (stored_txt_canvas != null) {
                  restoreBoth();
                }
                return $('*[data-types=Text]').hide();
              };
              xmlBinding.onSelect = function() {
                if (stored_txt_canvas != null) {
                  restoreBoth();
                }
                return $('*[data-types=Text]').hide();
              };
              stdBinding.onSelect = function() {
                if (stored_txt_canvas != null) {
                  restoreBoth();
                }
                return $('*[data-types=Text]').show();
              };
              return imgBinding.onSelect = function() {
                var c;
                stored_txt_canvas = $('*[data-types=Text]').parent();
                $('*[data-types=Text]').parent().remove();
                c = /(col-[^-]+?-)(\d+)/g.exec($('*[data-types=Image]').parent()[0].className);
                $('*[data-types=Image]').parent()[0].className = c[1] + parseInt(c[2]) * 2;
                return $('*[data-types=Image]').trigger('resetPres');
              };
              /*
              $(imgOnly).click (e) ->
                e.preventDefault()
                  
                if !$(imgOnly).hasClass('active')
                  stored_txt_canvas = $('*[data-types=Text]').parent()
                  $('*[data-types=Text]').parent().remove()
                  
                  # Double the bootstrap column
                  c = /(col-[^-]+?-)(\d+)/g.exec( $('*[data-types=Image]').parent()[0].className )
                  $('*[data-types=Image]').parent()[0].className = c[1] + parseInt(c[2]) * 2
                  
                  $('*[data-types=Image]').trigger('resetPres')
                  that.setMode('imgOnly')
                  
              $(rdg).click (e) ->
                e.preventDefault()
                  
                if stored_txt_canvas?            
                  restoreBoth()
                  
                if !$(rdg).hasClass('active')
                  $('*[data-types=Text]').hide()
                  that.setMode('reading')
                  
              $(xml).click (e) ->
                e.preventDefault()
                  
                if stored_txt_canvas?            
                  restoreBoth()
                  
                if !$(xml).hasClass('active')
                  $('*[data-types=Text]').hide()
                  that.setMode('xml')          
                  
              $(std).click (e) ->
                e.preventDefault()
                  
                if stored_txt_canvas?
                  restoreBoth()
                $('*[data-types=Text]').show()
                that.setMode('normal')
              */

            }]));
          };
        });
        return Component.namespace("LimitViewControls", function(LimitViewControls) {
          return LimitViewControls.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.LimitViewControls"].concat(__slice.call(args), [function(that, container) {
              var $c;
              $c = $(container);
              that.options.onModeChange.addListener(function(m) {
                if (m !== 'normal') {
                  $(container).fadeTo(1, 0.3);
                  return $(container).find('input').prop('disabled', true);
                } else {
                  $(container).fadeTo(1, 1);
                  return $(container).find('input').prop('disabled', false);
                }
              });
              $c.find('#hand-view_2').change(function() {
                var css;
                if ($(this).is(':checked')) {
                  css = ".canvas[data-types] .hand-pbs{ color:#a54647; } \n.canvas[data-types] *:not(.hand-pbs), .canvas[data-types] .DeletionAnnotation:not(.hand-pbs){ color:#D9D9D9; }\n.canvas[data-types] .DeletionAnnotation.hand-pbs{ color:#a54647; }";
                  $('#LimitViewControls_classes').remove();
                  return $("<style type='text/css' id='LimitViewControls_classes'>" + css + "</style>").appendTo("head");
                }
              });
              $c.find('#hand-view_1').change(function() {
                var css;
                if ($(this).is(':checked')) {
                  css = ".canvas[data-types] *:not(.hand-pbs), .canvas[data-types] .DeletionAnnotation.hand-pbs{ color:#a54647; }\n.canvas[data-types] .hand-pbs{ color:#D9D9D9; } \n.canvas[data-types] .hand-library{ color:#D9D9D9; } \n.canvas[data-types] .hand-comp{ color:#D9D9D9; } \n.canvas[data-types] .DeletionAnnotation:not(.hand-pbs){ color:#a54647 }\n.canvas[data-types] .DeletionAnnotation.hand-library{ color:#D9D9D9 }\n.canvas[data-types] .DeletionAnnotation.hand-comp{ color:#D9D9D9 }";
                  $('#LimitViewControls_classes').remove();
                  return $("<style type='text/css' id='LimitViewControls_classes'>" + css + "</style>").appendTo("head");
                }
              });
              return $c.find('#hand-view_0').change(function() {
                if ($(this).is(':checked')) {
                  return $('#LimitViewControls_classes').remove();
                }
              });
            }]));
          };
        });
      });
      SGAReader.namespace("Controller", function(Controller) {
        return Controller.namespace("ModeSelector", function(ModeSelector) {
          return ModeSelector.initInstance = function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Controller).initInstance.apply(_ref, ["SGA.Reader.Controller.ModeSelector"].concat(__slice.call(args), [function(that, container) {
              var set;
              set = [];
              that.applyBindings = function(binding, options) {
                var el;
                set.push(binding);
                el = binding.locate('');
                binding.$clickHandler = function(e) {
                  var b, _i, _len, _results;
                  e.preventDefault();
                  binding.events.onModeSelect.fire(options.mode);
                  _results = [];
                  for (_i = 0, _len = set.length; _i < _len; _i++) {
                    b = set[_i];
                    _results.push(typeof b.eventModeSelect === "function" ? b.eventModeSelect(options.mode) : void 0);
                  }
                  return _results;
                };
                el.bind('click', binding.$clickHandler);
                binding.eventModeSelect = function(m) {
                  if (options.mode === m) {
                    if (!el.hasClass('active')) {
                      el.addClass('active');
                      return binding.onSelect();
                    }
                  } else {
                    if (el.hasClass('active')) {
                      el.removeClass('active');
                      return binding.onUnselect();
                    }
                  }
                };
                binding.onSelect = function() {};
                return binding.onUnselect = function() {};
              };
              return that.removeBindings = function(binding) {
                var s;
                set = (function() {
                  var _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = set.length; _i < _len; _i++) {
                    s = set[_i];
                    if (s !== binding) {
                      _results.push(s);
                    }
                  }
                  return _results;
                })();
                return el.unbind('click', binding.$clickHandler);
              };
            }]));
          };
        });
      });
      return SGAReader.namespace("Application", function(Application) {
        return Application.namespace("SharedCanvas", function(SharedCanvas) {
          SharedCanvas.initInstance = function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Application).initInstance.apply(_ref, ["SGA.Reader.Application.SharedCanvas"].concat(__slice.call(args), [function(that) {
              var currentSequence, extractSpatialConstraint, extractTextBody, extractTextTarget, manifestData, options, presentations, textSource;
              options = that.options;
              presentations = [];
              that.addPresentation = function(config) {
                var p;
                p = SGA.Reader.Presentation.Canvas.initInstance(config.container, {
                  types: config.types,
                  application: function() {
                    return that;
                  },
                  dataView: that.dataView.canvasAnnotations
                });
                return presentations.push([p, config.container]);
              };
              currentSequence = null;
              that.events.onSequenceChange.addListener(function(s) {
                var hash, n, p, paras, seq, _ref;
                currentSequence = s;
                seq = that.dataStore.data.getItem(currentSequence);
                hash = $.param.fragment(window.location.href);
                paras = $.deparam(hash);
                n = parseInt(paras.n);
                if ((paras.n != null) && (seq.sequence.length >= (_ref = n - 1) && _ref >= 0)) {
                  p = n - 1;
                } else {
                  if ((seq != null ? seq.sequence : void 0) != null) {
                    p = seq.sequence.indexOf(that.getCanvas());
                  }
                  if (p < 0) {
                    p = 0;
                  }
                }
                return that.setPosition(p);
              });
              that.events.onPositionChange.addListener(function(p) {
                var canvasKey, seq, _ref;
                seq = that.dataStore.data.getItem(currentSequence);
                canvasKey = (_ref = seq.sequence) != null ? _ref[p] : void 0;
                that.lockPosition();
                that.setCanvas(canvasKey);
                return that.unlockPosition();
              });
              that.events.onCanvasChange.addListener(function(k) {
                var allAnnos, annos, canvasKey, p, seq, _ref;
                that.dataView.canvasAnnotations.setKey(k);
                seq = that.dataStore.data.getItem(currentSequence);
                p = seq.sequence.indexOf(k);
                if (p >= 0 && p !== that.getPosition()) {
                  that.lockCanvas();
                  that.setPosition(p);
                  that.unlockCanvas();
                }
                canvasKey = (_ref = seq.sequence) != null ? _ref[p] : void 0;
                allAnnos = that.dataView.canvasAnnotations.items();
                if (allAnnos.length > 0) {
                  that.dataView.canvasAnnotations.removeItems(allAnnos);
                  annos = that.getAnnotationsForCanvas(canvasKey);
                  that.dataStore.data.removeItems(annos);
                }
                Q.nfcall(that.loadCanvas, k).then(function() {
                  return setTimeout((function() {
                    var pp, _i, _len, _results;
                    _results = [];
                    for (_i = 0, _len = presentations.length; _i < _len; _i++) {
                      pp = presentations[_i];
                      _results.push(pp[0].setCanvas(k));
                    }
                    return _results;
                  }), 100);
                });
                return k;
              });
              manifestData = SGA.Reader.Data.Manifest.initInstance();
              that.events.onItemsProcessedChange = manifestData.events.onItemsProcessedChange;
              that.events.onItemsToProcessChange = manifestData.events.onItemsToProcessChange;
              that.getItemsProcessed = manifestData.getItemsProcessed;
              that.getItemsToProcess = manifestData.getItemsToProcess;
              that.setItemsProcessed = manifestData.setItemsProcessed;
              that.setItemsToProcess = manifestData.setItemsToProcess;
              that.addItemsProcessed = manifestData.addItemsProcessed;
              that.addItemsToProcess = manifestData.addItemsToProcess;
              that.addManifestData = manifestData.importFromURL;
              that.getAnnotationsForCanvas = manifestData.getAnnotationsForCanvas;
              that.flushSearchResults = manifestData.flushSearchResults;
              that.getSearchResultCanvases = manifestData.getSearchResultCanvases;
              textSource = SGA.Reader.Data.TextStore.initInstance();
              that.withSource = textSource.withFile;
              extractSpatialConstraint = function(item, id) {
                var bits, constraint, _ref, _ref1;
                if (id == null) {
                  return;
                }
                constraint = manifestData.getItem(id);
                if (__indexOf.call(constraint.type, 'oaFragmentSelector') >= 0) {
                  if (constraint.rdfvalue[0].substr(0, 5) === "xywh=") {
                    item.shape = "Rectangle";
                    bits = constraint.rdfvalue[0].substr(5).split(",");
                    item.x = parseInt(bits[0], 10);
                    item.y = parseInt(bits[1], 10);
                    item.width = parseInt(bits[2], 10);
                    return item.height = parseInt(bits[3], 10);
                  }
                } else {
                  if (constraint.oaxbegin != null) {
                    item.start = parseInt((_ref = constraint.oaxbegin) != null ? _ref[0] : void 0, 10);
                  }
                  if (constraint.oaxend != null) {
                    return item.end = parseInt((_ref1 = constraint.oaxend) != null ? _ref1[0] : void 0, 10);
                  }
                }
              };
              extractTextTarget = function(item, id) {
                var styleItem, target, _ref;
                if (id == null) {
                  return;
                }
                target = manifestData.getItem(id);
                if (__indexOf.call(target.type, "oaSpecificResource") >= 0) {
                  item.target = target.oahasSource;
                  if (target.oahasStyle != null) {
                    styleItem = manifestData.getItem(target.oahasStyle[0]);
                    if (__indexOf.call(styleItem.dcformat, "text/css") >= 0) {
                      item.css = styleItem.cntchars;
                    }
                  }
                  if (target.sgahasClass != null) {
                    item.cssclass = target.sgahasClass[0];
                  }
                  return extractSpatialConstraint(item, (_ref = target.oahasSelector) != null ? _ref[0] : void 0);
                } else {
                  return item.target = id;
                }
              };
              extractTextBody = function(item, id) {
                var body, _ref;
                if (id == null) {
                  return;
                }
                body = manifestData.getItem(id);
                textSource.addFile(body.oahasSource);
                item.source = body.oahasSource;
                return extractSpatialConstraint(item, (_ref = body.oahasSelector) != null ? _ref[0] : void 0);
              };
              that.loadCanvas = function(canvas, cb) {
                var annos, deferred, items, syncer, textAnnos, textSources;
                deferred = Q.defer();
                items = [];
                textSources = {};
                textAnnos = [];
                syncer = MITHgrid.initSynchronizer();
                annos = manifestData.getAnnotationsForCanvas(canvas);
                that.addItemsToProcess(annos.length);
                syncer.process(annos, function(id) {
                  var aitem, array, f, imgitem, item, sgaTypes, target, _name, _ref, _ref1, _ref2, _ref3;
                  that.addItemsProcessed(1);
                  aitem = manifestData.getItem(id);
                  array = null;
                  item = {
                    id: id
                  };
                  if (__indexOf.call(aitem.type, "scContentAnnotation") >= 0) {
                    extractTextTarget(item, (_ref = aitem.oahasTarget) != null ? _ref[0] : void 0);
                    extractTextBody(item, (_ref1 = aitem.oahasBody) != null ? _ref1[0] : void 0);
                    if ((item.start != null) && (item.end != null)) {
                      if (textSources[_name = item.source] == null) {
                        textSources[_name] = [];
                      }
                      textSources[item.source].push([id, item.start, item.end]);
                    }
                    if (item.text != null) {
                      item.type = "ContentAnnotation";
                    } else {
                      item.type = "TextContentZone";
                    }
                    array = items;
                  } else if (__indexOf.call(aitem.type, "scImageAnnotation") >= 0) {
                    imgitem = manifestData.getItem(aitem.oahasBody);
                    if ($.isArray(imgitem)) {
                      imgitem = imgitem[0];
                    }
                    array = items;
                    item.target = aitem.oahasTarget;
                    item.label = aitem.rdfslabel;
                    item.image = imgitem.oahasSource || aitem.oahasBody;
                    item.type = "Image";
                    if (__indexOf.call(imgitem["dcformat"], "image/jp2") >= 0 && (that.imageControls != null) && (imgitem.schasRelatedService != null)) {
                      item.type = "ImageViewer";
                      item.url = imgitem.schasRelatedService[0] + "?url_ver=Z39.88-2004&rft_id=" + item.image[0];
                    }
                  } else if (__indexOf.call(aitem.type, "scZoneAnnotation") >= 0) {
                    target = manifestData.getItem(aitem.oahasTarget);
                    extractSpatialConstraint(item, (_ref2 = target.hasSelector) != null ? _ref2[0] : void 0);
                    array = items;
                    item.target = target.hasSource;
                    item.label = aitem.rdfslabel;
                    item.type = "ZoneAnnotation";
                  } else {
                    sgaTypes = (function() {
                      var _i, _len, _ref3, _results;
                      _ref3 = aitem.type;
                      _results = [];
                      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
                        f = _ref3[_i];
                        if (f.substr(0, 3) === "sga" && f.substr(f.length - 10) === "Annotation") {
                          _results.push(f.substr(3));
                        }
                      }
                      return _results;
                    })();
                    if (sgaTypes.length > 0) {
                      extractTextTarget(item, (_ref3 = aitem.oahasTarget) != null ? _ref3[0] : void 0);
                      if (aitem.sgatextAlignment != null) {
                        item.align = aitem.sgatextAlignment;
                      }
                      if (aitem.sgatextIndentLevel != null) {
                        item.indent = aitem.sgatextIndentLevel;
                      }
                      item.type = sgaTypes;
                      array = textAnnos;
                    }
                  }
                  if ((item.type != null) && (array != null)) {
                    return array.push(item);
                  }
                });
                syncer.done(function() {
                  that.addItemsToProcess(1 + textAnnos.length);
                  return that.dataStore.data.loadItems(items, function() {
                    var item, modInfo, modend, modstart, s, setMod, source, sources, _fn, _i, _j, _len, _len1;
                    items = [];
                    modstart = {};
                    modend = {};
                    modInfo = {};
                    setMod = function(item) {
                      var align, end, id, indent, source, start, _base, _base1;
                      indent = item.indent;
                      align = item.align;
                      source = item.target;
                      start = item.start;
                      end = item.end;
                      id = item.id;
                      if ($.isArray(id)) {
                        id = id[0];
                      }
                      modInfo[id] = item;
                      if (modstart[source] == null) {
                        modstart[source] = {};
                      }
                      if ((_base = modstart[source])[start] == null) {
                        _base[start] = [];
                      }
                      modstart[source][start].push(id);
                      if (modend[source] == null) {
                        modend[source] = {};
                      }
                      if ((_base1 = modend[source])[end] == null) {
                        _base1[end] = [];
                      }
                      return modend[source][end].push(id);
                    };
                    for (_i = 0, _len = textAnnos.length; _i < _len; _i++) {
                      item = textAnnos[_i];
                      setMod(item);
                    }
                    sources = (function() {
                      var _results;
                      _results = [];
                      for (s in modstart) {
                        _results.push(s);
                      }
                      return _results;
                    })();
                    that.addItemsToProcess(sources.length);
                    that.addItemsProcessed(textAnnos.length);
                    _fn = function(source) {
                      return that.withSource(source, function(text) {
                        var align, br_pushed, id, idx, indent, last_pos, makeLinebreak, makeTextItems, mends, modIds, mstarts, needs_br, p, pos, positions, processNode, pushTextItem, textItems, _k, _l, _len2, _len3, _len4, _m, _ref, _ref1;
                        textItems = [];
                        modIds = [];
                        br_pushed = false;
                        pushTextItem = function(classes, css, target, start, end, indent, aling) {
                          var titem;
                          if (indent == null) {
                            indent = null;
                          }
                          if (aling == null) {
                            aling = null;
                          }
                          titem = {
                            type: classes,
                            css: css.join(" "),
                            text: text.slice(start, end),
                            id: source + "-" + start + "-" + end,
                            target: target,
                            start: start,
                            end: end
                          };
                          if (indent != null) {
                            titem.indent = indent;
                          }
                          if (typeof align !== "undefined" && align !== null) {
                            titem.align = align;
                          }
                          return textItems.push(titem);
                        };
                        processNode = function(start, end) {
                          var classes, css, id, _k, _len2;
                          classes = [];
                          css = [];
                          for (_k = 0, _len2 = modIds.length; _k < _len2; _k++) {
                            id = modIds[_k];
                            classes.push(modInfo[id].type);
                            if (modInfo[id].cssclass != null) {
                              classes.push(modInfo[id].cssclass);
                            }
                            if ($.isArray(modInfo[id].css)) {
                              css.push(modInfo[id].css.join(" "));
                            } else {
                              css.push(modInfo[id].css);
                            }
                          }
                          if (classes.length === 0) {
                            classes.push("Text");
                          }
                          return makeTextItems(start, end, classes, css);
                        };
                        makeTextItems = function(start, end, classes, css, indent, align) {
                          var candidate, e, _k, _len2, _ref;
                          _ref = textSources[source] || [];
                          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
                            candidate = _ref[_k];
                            if (start <= candidate[2] && end >= candidate[1]) {
                              s = Math.min(Math.max(start, candidate[1]), candidate[2]);
                              e = Math.max(Math.min(end, candidate[2]), candidate[1]);
                              pushTextItem(classes, css, candidate[0], s, e, indent, align);
                            }
                          }
                          return false;
                        };
                        makeLinebreak = function(pos, indent, align) {
                          var classes;
                          classes = ["LineBreak"];
                          return makeTextItems(pos, pos, classes, [""], indent, align);
                        };
                        mstarts = modstart[source] || [];
                        mends = modend[source] || [];
                        last_pos = 0;
                        positions = ((function() {
                          var _results;
                          _results = [];
                          for (p in mstarts) {
                            _results.push(parseInt(p, 10));
                          }
                          return _results;
                        })()).concat((function() {
                          var _results;
                          _results = [];
                          for (p in mends) {
                            _results.push(parseInt(p, 10));
                          }
                          return _results;
                        })()).sort(function(a, b) {
                          return a - b;
                        });
                        for (_k = 0, _len2 = positions.length; _k < _len2; _k++) {
                          pos = positions[_k];
                          if (pos !== last_pos) {
                            processNode(last_pos, pos);
                            if (br_pushed && !text.substr(last_pos, pos - last_pos).match(/^\s*$/)) {
                              br_pushed = false;
                            }
                            needs_br = false;
                            _ref = mstarts[pos] || [];
                            for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {
                              id = _ref[_l];
                              if (__indexOf.call(modInfo[id].type, "LineAnnotation") >= 0) {
                                needs_br = true;
                              }
                              modIds.push(id);
                            }
                            _ref1 = mends[pos] || [];
                            for (_m = 0, _len4 = _ref1.length; _m < _len4; _m++) {
                              id = _ref1[_m];
                              if (__indexOf.call(modInfo[id].type, "LineAnnotation") >= 0) {
                                needs_br = true;
                              }
                              idx = modIds.indexOf(id);
                              if (idx > -1) {
                                modIds.splice(idx, 1);
                              }
                            }
                            if (needs_br && !br_pushed) {
                              indent = null;
                              align = null;
                              if (modInfo[id].indent != null) {
                                indent = modInfo[id].indent;
                              }
                              if (modInfo[id].align != null) {
                                align = modInfo[id].align;
                              }
                              makeLinebreak(pos, indent, align);
                              br_pushed = true;
                            }
                            last_pos = pos;
                          }
                        }
                        processNode(last_pos, text.length);
                        return that.dataStore.data.loadItems(textItems, function() {
                          return that.addItemsProcessed(1);
                        });
                      });
                    };
                    for (_j = 0, _len1 = sources.length; _j < _len1; _j++) {
                      source = sources[_j];
                      _fn(source);
                    }
                    deferred.resolve();
                    return that.addItemsProcessed(1);
                  });
                });
                if (cb != null) {
                  cb();
                }
                return deferred.promise;
              };
              if (options.url != null) {
                manifestData.importFromURL(options.url, function() {
                  var canvases, items, layers, ranges, seq, syncer, zones;
                  items = [];
                  syncer = MITHgrid.initSynchronizer();
                  canvases = manifestData.getCanvases();
                  that.addItemsToProcess(canvases.length);
                  syncer.process(canvases, function(id) {
                    var mitem, _ref, _ref1;
                    that.addItemsProcessed(1);
                    mitem = manifestData.getItem(id);
                    return items.push({
                      id: id,
                      type: 'Canvas',
                      width: parseInt((_ref = mitem.exifwidth) != null ? _ref[0] : void 0, 10),
                      height: parseInt((_ref1 = mitem.exifheight) != null ? _ref1[0] : void 0, 10),
                      label: mitem.dctitle || mitem.rdfslabel
                    });
                  });
                  zones = manifestData.getZones();
                  that.addItemsToProcess(zones.length);
                  syncer.process(zones, function(id) {
                    var zitem, _ref, _ref1, _ref2;
                    that.addItemsProcessed(1);
                    zitem = manifestData.getItem(id);
                    return items.push({
                      id: id,
                      type: 'Zone',
                      width: parseInt((_ref = mitem.exifwidth) != null ? _ref[0] : void 0, 10),
                      height: parseInt((_ref1 = mitem.exifheight) != null ? _ref1[0] : void 0, 10),
                      angle: parseInt((_ref2 = mitem.scnaturalAngle) != null ? _ref2[0] : void 0, 10) || 0,
                      label: zitem.rdfslabel
                    });
                  });
                  seq = manifestData.getSequences();
                  that.addItemsToProcess(seq.length);
                  syncer.process(seq, function(id) {
                    var item, sitem;
                    that.addItemsProcessed(1);
                    sitem = manifestData.getItem(id);
                    item = {
                      id: id,
                      type: 'Sequence',
                      label: sitem.rdfslabel
                    };
                    seq = [];
                    seq.push(sitem.rdffirst[0]);
                    sitem = manifestData.getItem(sitem.rdfrest[0]);
                    while (sitem.id != null) {
                      seq.push(sitem.rdffirst[0]);
                      sitem = manifestData.getItem(sitem.rdfrest[0]);
                    }
                    item.sequence = seq;
                    return items.push(item);
                  });
                  ranges = manifestData.getRanges();
                  that.addItemsToProcess(ranges.length);
                  syncer.process(ranges, function(id) {
                    var contents, item, ritem;
                    that.addItemsProcessed(1);
                    ritem = manifestData.getItem(id);
                    item = {
                      id: id,
                      type: 'Range',
                      label: ritem.rdfslabel
                    };
                    contents = [];
                    contents.push(ritem.rdffirst[0]);
                    ritem = manifestData.getItem(ritem.rdfrest[0]);
                    while (ritem.id != null) {
                      contents.push(ritem.rdffirst[0]);
                      ritem = manifestData.getItem(ritem.rdfrest[0]);
                    }
                    item.canvases = contents;
                    return items.push(item);
                  });
                  layers = manifestData.getLayers();
                  that.addItemsToProcess(layers.length);
                  syncer.process(layers, function(id) {
                    var a, aitem, annos, aritem, c, contents, item, ritem, _i, _len, _ref;
                    that.addItemsProcessed(1);
                    ritem = manifestData.getItem(id);
                    item = {
                      id: id,
                      type: 'Layer',
                      label: ritem.rdfslabel,
                      motivation: (_ref = ritem.scforMotivation) != null ? _ref[0] : void 0
                    };
                    contents = [];
                    contents.push(ritem.rdffirst[0]);
                    ritem = manifestData.getItem(ritem.rdfrest[0]);
                    while (ritem.id != null) {
                      contents.push(ritem.rdffirst[0]);
                      ritem = manifestData.getItem(ritem.rdfrest[0]);
                    }
                    if (item.motivation === "http://www.shelleygodwinarchive.org/ns1#reading" || item.motivation === "http://www.shelleygodwinarchive.org/ns1#source") {
                      annos = [];
                      for (_i = 0, _len = contents.length; _i < _len; _i++) {
                        c = contents[_i];
                        ritem = manifestData.getItem(c);
                        a = manifestData.getItem(ritem.rdffirst[0]);
                        annos.push(a.id);
                        aritem = manifestData.getItem(a.id[0]);
                        aitem = {
                          id: aritem.id[0],
                          type: 'LayerAnno',
                          motivation: item.motivation,
                          body: aritem.oahasBody[0],
                          canvas: a.oahasTarget[0]
                        };
                        items.push(aitem);
                      }
                      item.annotations = annos;
                    }
                    item.canvases = contents;
                    return items.push(item);
                  });
                  return syncer.done(function() {
                    return that.dataStore.data.loadItems(items);
                  });
                });
              }
              that.getManifestURI = function() {
                var ret;
                ret = manifestData.getManifests();
                if (ret.length > 0) {
                  return ret[0];
                }
                return null;
              };
              that.getRangeMetadata = function(id) {
                var info, meta, _ref;
                meta = {};
                info = manifestData.getItem(id);
                meta.rangeTitle = (_ref = info.rdfslabel) != null ? _ref[0] : void 0;
                return meta;
              };
              that.getManifestMetadata = function(id) {
                var info, ret, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
                ret = {};
                if (id == null) {
                  id = that.getManifestURI();
                }
                if (id != null) {
                  info = manifestData.getItem(id);
                  ret.workTitle = (_ref = info.dctitle) != null ? _ref[0] : void 0;
                  ret.workNotebook = (_ref1 = info.rdfslabel) != null ? _ref1[0] : void 0;
                  ret.workAuthor = (_ref2 = info.scagentLabel) != null ? _ref2[0] : void 0;
                  ret.workHands = (_ref3 = info.sgahandLabel) != null ? _ref3[0] : void 0;
                  ret.workDate = (_ref4 = info.scdateLabel) != null ? _ref4[0] : void 0;
                  ret.workState = (_ref5 = info.sgastateLabel) != null ? _ref5[0] : void 0;
                  ret.workInstitution = (_ref6 = info.scattributionLabel) != null ? _ref6[0] : void 0;
                  ret.workShelfmark = (_ref7 = info.sgashelfmarkLabel) != null ? _ref7[0] : void 0;
                }
                return ret;
              };
              return that.getCanvasMetadata = function(id) {
                var info, meta, rangeIds, rangeTitles, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
                meta = that.getManifestMetadata();
                info = manifestData.getItem(id);
                meta.canvasTitle = (_ref = info.rdfslabel) != null ? _ref[0] : void 0;
                if (((_ref1 = info.dctitle) != null ? _ref1[0] : void 0) != null) {
                  meta.workTitle = info.dctitle[0];
                }
                if (((_ref2 = info.scagentLabel) != null ? _ref2[0] : void 0) != null) {
                  meta.workAuthor = info.scagentLabel[0];
                }
                if (((_ref3 = info.sgahandLabel) != null ? _ref3[0] : void 0) != null) {
                  meta.workHands = info.sgahandLabel[0];
                }
                if (((_ref4 = info.scdateLabel) != null ? _ref4[0] : void 0) != null) {
                  meta.workDate = info.scdateLabel[0];
                }
                if (((_ref5 = info.sgastateLabel) != null ? _ref5[0] : void 0) != null) {
                  meta.workState = info.sgastateLabel[0];
                }
                if ((_ref6 = info.scattributionLabel) != null ? _ref6[0] : void 0) {
                  meta.workInstitution = info.scattributionLabel[0];
                }
                if (((_ref7 = info.sgashelfmarkLabel) != null ? _ref7[0] : void 0) != null) {
                  meta.workShelfmark = info.sgashelfmarkLabel[0];
                }
                rangeIds = that.dataStore.data.getSubjectsUnion(MITHgrid.Data.Set.initInstance([id]), 'canvases');
                rangeTitles = {};
                rangeIds.visit(function(rid) {
                  var rmeta;
                  rmeta = that.getRangeMetadata(rid);
                  if (rmeta.rangeTitle != null) {
                    meta.rangeTitle || (meta.rangeTitle = []);
                    return meta.rangeTitle.push(rmeta.rangeTitle);
                  }
                });
                return meta;
              };
            }]));
          };
          return SharedCanvas.builder = function(config) {
            var manifestCallbacks, that, updateProgressTracker, updateProgressTrackerVisibility, updateSearchResults, updateSpinnerVisibility, uptv, uptvTimer;
            that = {
              manifests: {}
            };
            manifestCallbacks = {};
            updateProgressTracker = function() {};
            updateProgressTrackerVisibility = function() {};
            updateSpinnerVisibility = function() {};
            updateSearchResults = function() {};
            if (config.spinner != null) {
              updateSpinnerVisibility = function() {
                var m, obj, tot, _ref, _results;
                _ref = that.manifests;
                _results = [];
                for (m in _ref) {
                  obj = _ref[m];
                  tot = obj.getItemsToProcess();
                  _results.push(obj.events.onItemsToProcessChange.addListener(function(i) {
                    if (i > tot) {
                      return config.spinner.hide();
                    }
                  }));
                }
                return _results;
              };
            }
            if (config.progressTracker != null) {
              updateProgressTracker = function() {
                var d, m, n, obj, _ref;
                n = 0;
                d = 0;
                _ref = that.manifests;
                for (m in _ref) {
                  obj = _ref[m];
                  n += obj.getItemsProcessed();
                  d += obj.getItemsToProcess();
                }
                config.progressTracker.setNumerator(n);
                return config.progressTracker.setDenominator(d || 1);
              };
              uptv = null;
              uptvTimer = 1000;
              updateProgressTrackerVisibility = function() {
                if (uptv != null) {
                  return uptvTimer = 500;
                } else {
                  uptv = function() {
                    var m, obj, _ref;
                    _ref = that.manifests;
                    for (m in _ref) {
                      obj = _ref[m];
                      if (obj.getItemsToProcess() > obj.getItemsProcessed()) {
                        config.progressTracker.show();
                        uptvTimer /= 2;
                        if (uptvTimer < 500) {
                          uptvTimer = 500;
                        }
                        setTimeout(uptv, uptvTimer);
                        return;
                      }
                    }
                    if (uptvTimer > 500) {
                      config.progressTracker.hide();
                    }
                    uptvTimer *= 2;
                    if (uptvTimer > 10000) {
                      uptvTimer = 10000;
                    }
                    return setTimeout(uptv, uptvTimer);
                  };
                  return uptv();
                }
              };
            }
            if (config.searchBox != null) {
              if (config.searchBox.getServiceURL() != null) {
                $.param.fragment.noEscape(':,/|');
                updateSearchResults = function(q) {
                  var m, obj, queryURL, _ref, _results;
                  queryURL = config.searchBox.getServiceURL() + q;
                  _ref = that.manifests;
                  _results = [];
                  for (m in _ref) {
                    obj = _ref[m];
                    obj.flushSearchResults();
                    _results.push(obj.addManifestData(queryURL, function() {
                      var canvasKey, canvasesWithResults, cwr, cwrPos, p, s, seq, _i, _len, _ref1;
                      p = obj.getPosition();
                      s = obj.getSequence();
                      seq = obj.dataStore.data.getItem(s);
                      canvasKey = (_ref1 = seq.sequence) != null ? _ref1[p] : void 0;
                      canvasesWithResults = obj.getSearchResultCanvases();
                      cwrPos = [];
                      for (_i = 0, _len = canvasesWithResults.length; _i < _len; _i++) {
                        cwr = canvasesWithResults[_i];
                        cwrPos.push($.inArray(cwr, seq.sequence));
                      }
                      $('.canvas').trigger("searchResultsChange", [cwrPos]);
                      return Q.fcall(obj.loadCanvas, canvasKey).then(function() {
                        setTimeout(function() {
                          return obj.setPosition(-1, 0);
                        });
                        return setTimeout(function() {
                          return obj.setPosition(p, 0);
                        });
                      });
                    }));
                  }
                  return _results;
                };
                config.searchBox.events.onQueryChange.addListener(function(q) {
                  return updateSearchResults(q);
                });
              } else {
                console.log("You must specify the URL to some search service.");
              }
            }
            that.onManifest = function(url, cb) {
              if (that.manifests[url] != null) {
                return that.manifests[url].ready(function() {
                  return cb(that.manifests[url]);
                });
              } else {
                if (manifestCallbacks[url] == null) {
                  manifestCallbacks[url] = [];
                }
                return manifestCallbacks[url].push(cb);
              }
            };
            that.addPresentation = function(el) {
              var manifest, manifestUrl, types, _ref;
              manifestUrl = $(el).data('manifest');
              if (manifestUrl != null) {
                manifest = that.manifests[manifestUrl];
                if (manifest == null) {
                  manifest = Application.SharedCanvas.initInstance({
                    url: manifestUrl
                  });
                  that.manifests[manifestUrl] = manifest;
                  manifest.ready(function() {
                    var cb, cbs, _i, _len;
                    cbs = manifestCallbacks[manifestUrl] || [];
                    for (_i = 0, _len = cbs.length; _i < _len; _i++) {
                      cb = cbs[_i];
                      cb(manifest);
                    }
                    return delete manifestCallbacks[manifestUrl];
                  });
                  manifest.events.onItemsToProcessChange.addListener(updateProgressTracker);
                  manifest.events.onItemsProcessedChange.addListener(updateProgressTracker);
                  updateProgressTrackerVisibility();
                  updateSpinnerVisibility();
                  if (config.searchBox != null) {
                    manifest.ready(function() {
                      var removeListener;
                      if (manifest.getSequence() == null) {
                        return removeListener = manifest.events.onSequenceChange.addListener(function() {
                          var bbq_q, search;
                          search = function(bbq_q) {
                            bbq_q = bbq_q.replace(/:/g, '=');
                            bbq_q = bbq_q.replace(/\|/g, '&');
                            return updateSearchResults(bbq_q);
                          };
                          bbq_q = $.bbq.getState("s");
                          if (bbq_q != null) {
                            search(bbq_q);
                          }
                          return removeListener();
                        });
                      }
                    });
                  }
                }
                manifest.run();
                types = (_ref = $(el).data('types')) != null ? _ref.split(/\s*,\s*/) : void 0;
                return that.onManifest(manifestUrl, function(manifest) {
                  return manifest.addPresentation({
                    types: types,
                    container: $(el)
                  });
                });
              }
            };
            if (config["class"] == null) {
              config["class"] = ".canvas";
            }
            $(config["class"]).each(function(idx, el) {
              return that.addPresentation(el);
            });
            return that;
          };
        });
      });
    });
  })(jQuery, MITHgrid);

  MITHgrid.defaults('SGA.Reader.Application.SharedCanvas', {
    dataStores: {
      data: {
        types: {
          Sequence: {},
          Canvas: {}
        },
        properties: {
          target: {
            valueType: 'item'
          }
        }
      }
    },
    dataViews: {
      canvasAnnotations: {
        dataStore: 'data',
        type: MITHgrid.Data.SubSet,
        expressions: ['!target']
      },
      sequences: {
        dataStore: 'data',
        types: ['Sequence']
      }
    },
    variables: {
      Canvas: {
        is: 'lrw'
      },
      Sequence: {
        is: 'rw'
      },
      Position: {
        is: 'lrw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.Slider', {
    variables: {
      Min: {
        is: 'rw',
        isa: 'numeric'
      },
      Max: {
        is: 'rw',
        isa: 'numeric'
      },
      Value: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.PagerControls', {
    variables: {
      Min: {
        is: 'rw',
        isa: 'numeric'
      },
      Max: {
        is: 'rw',
        isa: 'numeric'
      },
      Value: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.SequenceSelector', {
    variables: {
      Sequence: {
        is: 'rw'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.ProgressBar', {
    variables: {
      Numerator: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      Denominator: {
        is: 'rw',
        "default": 1,
        isa: 'numeric'
      }
    },
    viewSetup: "<div class=\"progress progress-striped active\">\n  <div class=\"bar\" style=\"width: 0%;\"></div>\n</div>"
  });

  MITHgrid.defaults('SGA.Reader.Component.Spinner', {
    viewSetup: "<i class=\"icon-spinner icon-spin icon-3x\"></i>"
  });

  MITHgrid.defaults('SGA.Reader.Presentation.Canvas', {
    variables: {
      Canvas: {
        is: 'rw'
      },
      Scale: {
        is: 'rw',
        isa: 'numeric'
      },
      ImgOnly: {
        is: 'rw'
      },
      Height: {
        is: 'rw',
        isa: 'numeric'
      },
      Width: {
        is: 'rw',
        isa: 'numeric'
      },
      X: {
        is: 'rw',
        isa: 'numeric'
      },
      Y: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Presentation.TextContent', {
    variables: {
      Height: {
        is: 'rw',
        isa: 'numeric'
      },
      Width: {
        is: 'rw',
        isa: 'numeric'
      },
      X: {
        is: 'rw',
        isa: 'numeric'
      },
      Y: {
        is: 'rw',
        isa: 'numeric'
      },
      Scale: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Presentation.Zone', {
    variables: {
      Height: {
        is: 'rw',
        isa: 'numeric'
      },
      Width: {
        is: 'rw',
        isa: 'numeric'
      },
      X: {
        is: 'rw',
        isa: 'numeric'
      },
      Y: {
        is: 'rw',
        isa: 'numeric'
      },
      Scale: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Data.Manifest', {
    variables: {
      ItemsToProcess: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      ItemsProcessed: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.ImageControls', {
    variables: {
      Active: {
        is: 'rw',
        "default": false
      },
      Zoom: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      MaxZoom: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      MinZoom: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      ImgPosition: {
        is: 'rw',
        "default": {}
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.SearchBox', {
    variables: {
      Field: {
        is: 'rw',
        "default": false
      },
      Query: {
        is: 'rw',
        "default": false
      },
      ServiceURL: {
        is: 'rw',
        "default": false
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.ModeControls', {
    variables: {
      Mode: {
        is: 'rw',
        "default": 'normal'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Controller.ModeSelector', {
    bind: {
      events: {
        onModeSelect: null
      }
    }
  });

}).call(this);
