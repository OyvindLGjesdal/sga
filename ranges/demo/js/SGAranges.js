// Generated by CoffeeScript 1.6.2
/*
#
# (c) Copyright University of Maryland 2012-2013.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/


(function() {
  var __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($, MITHgrid) {
    MITHgrid.globalNamespace("SGA");
    return SGA.namespace("Ranges", function(SGAranges) {
      SGAranges.namespace("Data", function(Data) {
        return Data.namespace("Manifest", function(Manifest) {
          var NS, types;

          NS = {
            "http://dms.stanford.edu/ns/": "sc",
            "http://www.shared-canvas.org/ns/": "sc",
            "http://www.w3.org/2000/01/rdf-schema#": "rdfs",
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#": "rdf",
            "http://www.w3.org/2003/12/exif/ns#": "exif",
            "http://purl.org/dc/elements/1.1/": "dc",
            "http://www.w3.org/ns/openannotation/core/": "oa",
            "http://www.openannotation.org/ns/": "oa",
            "http://www.w3.org/ns/openannotation/extension/": "oax",
            "http://www.openarchives.org/ore/terms/": "ore",
            "http://www.shelleygodwinarchive.org/ns/1#": "sga",
            "http://www.shelleygodwinarchive.org/ns1#": "sga",
            "http://www.w3.org/2011/content#": "cnt",
            "http://purl.org/dc/dcmitype/": "dctypes"
          };
          types = {
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#type": "item",
            "http://www.w3.org/ns/openannotation/core/hasMotivation": "item"
          };
          return Manifest.initInstance = function() {
            var args;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Ranges.Data.Manifest"].concat(__slice.call(args), [function(that) {
              var data, flushSearchResults, getSearchResultCanvases, importFromURL, importer, itemsForCanvas, itemsWithType, loadedUrls, options;

              options = that.options;
              data = MITHgrid.Data.Store.initInstance();
              that.size = function() {
                return data.size();
              };
              importer = MITHgrid.Data.Importer.RDF_JSON.initInstance(data, NS, types);
              loadedUrls = [];
              importFromURL = function(url, cb) {
                if (__indexOf.call(loadedUrls, url) >= 0) {
                  cb();
                  return;
                }
                loadedUrls.push(url);
                return $.ajax({
                  url: url,
                  type: 'GET',
                  contentType: 'application/rdf+json',
                  processData: false,
                  dataType: 'json',
                  success: function(data) {
                    return that.importJSON(data, cb);
                  },
                  error: function(e) {
                    throw new Error("Could not load the manifest");
                  }
                });
              };
              that.importJSON = function(json, cb) {
                var syncer;

                syncer = MITHgrid.initSynchronizer(cb);
                syncer.increment();
                importer["import"](json, function(ids) {
                  var idset, urls;

                  idset = MITHgrid.Data.Set.initInstance(ids);
                  urls = data.getObjectsUnion(idset, 'oreisDescribedBy');
                  urls.visit(function(url) {
                    syncer.increment();
                    return importFromURL(url, syncer.decrement);
                  });
                  return syncer.decrement();
                });
                return syncer.done();
              };
              itemsWithType = function(type) {
                if (!$.isArray(type)) {
                  type = [type];
                }
                types = MITHgrid.Data.Set.initInstance(type);
                return data.getSubjectsUnion(types, "type").items();
              };
              itemsForCanvas = function(canvas) {
                var annos, canvasSet, contentAnnotations, imageAnnotations, specificResources, specificResourcesAnnos, tei, teiURL;

                if (!$.isArray(canvas)) {
                  canvas = [canvas];
                }
                canvasSet = MITHgrid.Data.Set.initInstance(canvas);
                specificResources = data.getSubjectsUnion(canvasSet, "oahasSource");
                imageAnnotations = data.getSubjectsUnion(canvasSet, "oahasTarget");
                contentAnnotations = data.getSubjectsUnion(specificResources, "oahasTarget");
                tei = data.getObjectsUnion(contentAnnotations, 'oahasBody');
                teiURL = data.getObjectsUnion(tei, 'oahasSource');
                specificResourcesAnnos = data.getSubjectsUnion(teiURL, 'oahasSource');
                annos = data.getSubjectsUnion(specificResourcesAnnos, 'oahasTarget').items();
                return annos.concat(imageAnnotations.items(), contentAnnotations.items());
              };
              flushSearchResults = function() {
                var searchResults;

                types = MITHgrid.Data.Set.initInstance(['sgaSearchAnnotation']);
                searchResults = data.getSubjectsUnion(types, "type").items();
                return data.removeItems(searchResults);
              };
              getSearchResultCanvases = function() {
                var annos, canvasKeys, searchResults, sources, specificResources, step, teiURL;

                types = MITHgrid.Data.Set.initInstance(['sgaSearchAnnotation']);
                searchResults = data.getSubjectsUnion(types, "type");
                specificResources = data.getObjectsUnion(searchResults, "oahasTarget");
                teiURL = data.getObjectsUnion(specificResources, 'oahasSource');
                sources = data.getSubjectsUnion(teiURL, 'oahasSource');
                annos = data.getSubjectsUnion(sources, 'oahasBody');
                step = data.getObjectsUnion(annos, 'oahasTarget');
                canvasKeys = data.getObjectsUnion(step, 'oahasSource');
                return $.unique(canvasKeys.items());
              };
              that.getCanvases = function() {
                return itemsWithType('scCanvas');
              };
              that.getZones = function() {
                return itemsWithType('scZone');
              };
              that.getSequences = function() {
                return itemsWithType('scSequence');
              };
              that.getRanges = function() {
                return itemsWithType('scRange');
              };
              that.getAnnotations = function() {
                return itemsWithType('oaAnnotation');
              };
              that.getAnnotationsForCanvas = itemsForCanvas;
              that.flushSearchResults = flushSearchResults;
              that.getSearchResultCanvases = getSearchResultCanvases;
              that.getItem = data.getItem;
              that.contains = data.contains;
              return that.importFromURL = function(url, cb) {
                return importFromURL(url, function() {
                  if (cb != null) {
                    return cb();
                  }
                });
              };
            }]));
          };
        });
      });
      SGAranges.namespace("Presentation", function(Presentation) {
        return Presentation.namespace("Range", function(Range) {
          return Range.initInstance = function() {
            var args, _ref;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Presentation).initInstance.apply(_ref, ["SGA.Ranges.Presentation.Range"].concat(__slice.call(args), [function(that, container) {
              var options;

              options = that.options;
              return that.addLens('Range', function(container, view, model, id) {
                var rendering;

                rendering = {};
                return console.log(model.getItem(id));
              });
            }]));
          };
        });
      });
      SGAranges.namespace("Component", function(Component) {
        return 0;
      });
      return SGAranges.namespace("Application", function(Application) {
        return Application.namespace("SGARangesApp", function(SGARangesApp) {
          SGARangesApp.initInstance = function() {
            var args, _ref;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Application).initInstance.apply(_ref, ["SGA.Ranges.Application.SGARangesApp"].concat(__slice.call(args), [function(that) {
              var manifestData, options, presentations;

              options = that.options;
              presentations = [];
              that.addPresentation = function(config) {
                var p;

                p = SGA.Ranges.Presentation.Range.initInstance(config.container, {
                  application: function() {
                    return that;
                  },
                  dataView: that.dataStore.data
                });
                return presentations.push([p, config.container]);
              };
              manifestData = SGA.Ranges.Data.Manifest.initInstance();
              if (options.url != null) {
                return manifestData.importFromURL(options.url, function() {
                  var canvases, items, ranges, seq, syncer;

                  items = [];
                  syncer = MITHgrid.initSynchronizer();
                  canvases = manifestData.getCanvases();
                  syncer.process(canvases, function(id) {
                    var mitem, _ref, _ref1;

                    mitem = manifestData.getItem(id);
                    return items.push({
                      id: id,
                      type: 'Canvas',
                      width: parseInt((_ref = mitem.exifwidth) != null ? _ref[0] : void 0, 10),
                      height: parseInt((_ref1 = mitem.exifheight) != null ? _ref1[0] : void 0, 10),
                      label: mitem.dctitle || mitem.rdfslabel
                    });
                  });
                  seq = manifestData.getSequences();
                  syncer.process(seq, function(id) {
                    var item, sitem;

                    sitem = manifestData.getItem(id);
                    item = {
                      id: id,
                      type: 'Sequence',
                      label: sitem.rdfslabel
                    };
                    seq = [];
                    seq.push(sitem.rdffirst[0]);
                    sitem = manifestData.getItem(sitem.rdfrest[0]);
                    while (sitem.id != null) {
                      seq.push(sitem.rdffirst[0]);
                      sitem = manifestData.getItem(sitem.rdfrest[0]);
                    }
                    item.sequence = seq;
                    return items.push(item);
                  });
                  ranges = manifestData.getRanges();
                  syncer.process(ranges, function(id) {
                    var item, ritem, rng;

                    ritem = manifestData.getItem(id);
                    item = {
                      id: id,
                      type: 'Range',
                      label: ritem.rdfslabel
                    };
                    rng = [];
                    rng.push(ritem.rdffirst[0]);
                    ritem = manifestData.getItem(ritem.rdfrest[0]);
                    while (ritem.id != null) {
                      rng.push(ritem.rdffirst[0]);
                      ritem = manifestData.getItem(ritem.rdfrest[0]);
                    }
                    item.sequence = rng;
                    return items.push(item);
                  });
                  return syncer.done(function() {
                    return that.dataStore.data.loadItems(items);
                  });
                });
              }
            }]));
          };
          return SGARangesApp.builder = function(config) {
            var manifestCallbacks, that;

            that = {
              manifests: {}
            };
            manifestCallbacks = {};
            that.onManifest = function(url, cb) {
              var _ref;

              if (that.manifests[url] != null) {
                return that.manifests[url].ready(function() {
                  return cb(that.manifests[url]);
                });
              } else {
                if ((_ref = manifestCallbacks[url]) == null) {
                  manifestCallbacks[url] = [];
                }
                return manifestCallbacks[url].push(cb);
              }
            };
            that.addPresentation = function(el) {
              var manifest, manifestUrl;

              manifestUrl = $(el).data('manifest');
              if (manifestUrl != null) {
                manifest = that.manifests[manifestUrl];
                if (manifest == null) {
                  manifest = Application.SGARangesApp.initInstance({
                    url: manifestUrl
                  });
                  that.manifests[manifestUrl] = manifest;
                  manifest.ready(function() {
                    var cb, cbs, _i, _len;

                    cbs = manifestCallbacks[manifestUrl] || [];
                    for (_i = 0, _len = cbs.length; _i < _len; _i++) {
                      cb = cbs[_i];
                      cb(manifest);
                    }
                    return delete manifestCallbacks[manifestUrl];
                  });
                }
                manifest.run();
                return that.onManifest(manifestUrl, function(manifest) {
                  return manifest.addPresentation({
                    container: $(el)
                  });
                });
              }
            };
            that.addPresentation($(config["class"]));
            return that;
          };
        });
      });
    });
  })(jQuery, MITHgrid);

  MITHgrid.defaults('SGA.Ranges.Application.SGARangesApp', {
    dataStores: {
      data: {
        types: {
          Sequence: {},
          Range: {},
          Canvas: {}
        },
        properties: {
          target: {
            valueType: 'item'
          }
        }
      }
    },
    dataViews: {
      canvasAnnotations: {
        dataStore: 'data',
        type: MITHgrid.Data.SubSet,
        expressions: ['!target']
      },
      sequences: {
        dataStore: 'data',
        types: ['Sequence']
      }
    },
    variables: {
      Canvas: {
        is: 'rw'
      },
      Sequence: {
        is: 'rw'
      },
      Position: {
        is: 'lrw',
        isa: 'numeric'
      }
    }
  });

  (function($) {
    var builder;

    return builder = SGA.Ranges.Application.SGARangesApp.builder({
      "class": ".range"
    });
  })(jQuery);

}).call(this);
